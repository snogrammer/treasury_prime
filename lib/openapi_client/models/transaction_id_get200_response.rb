=begin
#Treasury Prime API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module OpenapiClient
  class TransactionIdGet200Response
    attr_accessor :check_id

    attr_accessor :type_source

    attr_accessor :amount

    attr_accessor :issued_check_id

    attr_accessor :date

    attr_accessor :wire_id

    attr_accessor :desc

    attr_accessor :wire

    attr_accessor :book_id

    attr_accessor :type

    attr_accessor :incoming_wire

    attr_accessor :summary

    attr_accessor :balance

    attr_accessor :billpay_payment_id

    attr_accessor :id

    attr_accessor :card_id

    attr_accessor :trace_id

    attr_accessor :extended_timestamp

    attr_accessor :ach_id

    attr_accessor :fingerprint

    attr_accessor :check_number

    attr_accessor :related_transfer_ids

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'check_id' => :'check_id',
        :'type_source' => :'type_source',
        :'amount' => :'amount',
        :'issued_check_id' => :'issued_check_id',
        :'date' => :'date',
        :'wire_id' => :'wire_id',
        :'desc' => :'desc',
        :'wire' => :'wire',
        :'book_id' => :'book_id',
        :'type' => :'type',
        :'incoming_wire' => :'incoming_wire',
        :'summary' => :'summary',
        :'balance' => :'balance',
        :'billpay_payment_id' => :'billpay_payment_id',
        :'id' => :'id',
        :'card_id' => :'card_id',
        :'trace_id' => :'trace_id',
        :'extended_timestamp' => :'extended_timestamp',
        :'ach_id' => :'ach_id',
        :'fingerprint' => :'fingerprint',
        :'check_number' => :'check_number',
        :'related_transfer_ids' => :'related_transfer_ids'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'check_id' => :'String',
        :'type_source' => :'Enum',
        :'amount' => :'String',
        :'issued_check_id' => :'String',
        :'date' => :'Date',
        :'wire_id' => :'String',
        :'desc' => :'String',
        :'wire' => :'String',
        :'book_id' => :'String',
        :'type' => :'String',
        :'incoming_wire' => :'Object',
        :'summary' => :'String',
        :'balance' => :'String',
        :'billpay_payment_id' => :'String',
        :'id' => :'String',
        :'card_id' => :'String',
        :'trace_id' => :'String',
        :'extended_timestamp' => :'Datetime',
        :'ach_id' => :'String',
        :'fingerprint' => :'String',
        :'check_number' => :'String',
        :'related_transfer_ids' => :'Array'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::TransactionIdGet200Response` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::TransactionIdGet200Response`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'check_id')
        self.check_id = attributes[:'check_id']
      end

      if attributes.key?(:'type_source')
        self.type_source = attributes[:'type_source']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'issued_check_id')
        self.issued_check_id = attributes[:'issued_check_id']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'wire_id')
        self.wire_id = attributes[:'wire_id']
      end

      if attributes.key?(:'desc')
        self.desc = attributes[:'desc']
      end

      if attributes.key?(:'wire')
        self.wire = attributes[:'wire']
      end

      if attributes.key?(:'book_id')
        self.book_id = attributes[:'book_id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'incoming_wire')
        self.incoming_wire = attributes[:'incoming_wire']
      end

      if attributes.key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'billpay_payment_id')
        self.billpay_payment_id = attributes[:'billpay_payment_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'card_id')
        self.card_id = attributes[:'card_id']
      end

      if attributes.key?(:'trace_id')
        self.trace_id = attributes[:'trace_id']
      end

      if attributes.key?(:'extended_timestamp')
        self.extended_timestamp = attributes[:'extended_timestamp']
      end

      if attributes.key?(:'ach_id')
        self.ach_id = attributes[:'ach_id']
      end

      if attributes.key?(:'fingerprint')
        self.fingerprint = attributes[:'fingerprint']
      end

      if attributes.key?(:'check_number')
        self.check_number = attributes[:'check_number']
      end

      if attributes.key?(:'related_transfer_ids')
        self.related_transfer_ids = attributes[:'related_transfer_ids']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/^-?[0-9]+[.][0-9][0-9]$/)
      if !@amount.nil? && @amount !~ pattern
        invalid_properties.push("invalid value for \"amount\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^-?[0-9]+[.][0-9][0-9]$/)
      if !@balance.nil? && @balance !~ pattern
        invalid_properties.push("invalid value for \"balance\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@amount.nil? && @amount !~ Regexp.new(/^-?[0-9]+[.][0-9][0-9]$/)
      return false if !@balance.nil? && @balance !~ Regexp.new(/^-?[0-9]+[.][0-9][0-9]$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      pattern = Regexp.new(/^-?[0-9]+[.][0-9][0-9]$/)
      if !amount.nil? && amount !~ pattern
        fail ArgumentError, "invalid value for \"amount\", must conform to the pattern #{pattern}."
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] balance Value to be assigned
    def balance=(balance)
      pattern = Regexp.new(/^-?[0-9]+[.][0-9][0-9]$/)
      if !balance.nil? && balance !~ pattern
        fail ArgumentError, "invalid value for \"balance\", must conform to the pattern #{pattern}."
      end

      @balance = balance
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          check_id == o.check_id &&
          type_source == o.type_source &&
          amount == o.amount &&
          issued_check_id == o.issued_check_id &&
          date == o.date &&
          wire_id == o.wire_id &&
          desc == o.desc &&
          wire == o.wire &&
          book_id == o.book_id &&
          type == o.type &&
          incoming_wire == o.incoming_wire &&
          summary == o.summary &&
          balance == o.balance &&
          billpay_payment_id == o.billpay_payment_id &&
          id == o.id &&
          card_id == o.card_id &&
          trace_id == o.trace_id &&
          extended_timestamp == o.extended_timestamp &&
          ach_id == o.ach_id &&
          fingerprint == o.fingerprint &&
          check_number == o.check_number &&
          related_transfer_ids == o.related_transfer_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [check_id, type_source, amount, issued_check_id, date, wire_id, desc, wire, book_id, type, incoming_wire, summary, balance, billpay_payment_id, id, card_id, trace_id, extended_timestamp, ach_id, fingerprint, check_number, related_transfer_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
