=begin
#Treasury Prime API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # index account.id
    # @param [Hash] opts the optional parameters
    # @return [Array<AccountGet200ResponseInner>]
    def account_get(opts = {})
      data, _status_code, _headers = account_get_with_http_info(opts)
      data
    end

    # index account.id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AccountGet200ResponseInner>, Integer, Hash)>] Array<AccountGet200ResponseInner> data, response status code and response headers
    def account_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_get ...'
      end
      # resource path
      local_var_path = '/account'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AccountGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get account.active_holds
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AccountIdActiveHoldsGet200Response]
    def account_id_active_holds_get(id, opts = {})
      data, _status_code, _headers = account_id_active_holds_get_with_http_info(id, opts)
      data
    end

    # get account.active_holds
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountIdActiveHoldsGet200Response, Integer, Hash)>] AccountIdActiveHoldsGet200Response data, response status code and response headers
    def account_id_active_holds_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_id_active_holds_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_id_active_holds_get"
      end
      # resource path
      local_var_path = '/account/{id}/active_holds'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountIdActiveHoldsGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_id_active_holds_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_id_active_holds_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get-index account
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_id_average_balance_get(id, opts = {})
      account_id_average_balance_get_with_http_info(id, opts)
      nil
    end

    # get-index account
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def account_id_average_balance_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_id_average_balance_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_id_average_balance_get"
      end
      # resource path
      local_var_path = '/account/{id}/average_balance'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_id_average_balance_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_id_average_balance_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Daily Balances
    # The end of day balances are available using the daily_balance endpoint. You can query this endpoint by date range; if no date range is specified, the endpoint will return balances for the most recent 30 days including today.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_id_daily_balance_get(id, opts = {})
      account_id_daily_balance_get_with_http_info(id, opts)
      nil
    end

    # List Daily Balances
    # The end of day balances are available using the daily_balance endpoint. You can query this endpoint by date range; if no date range is specified, the endpoint will return balances for the most recent 30 days including today.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def account_id_daily_balance_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_id_daily_balance_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_id_daily_balance_get"
      end
      # resource path
      local_var_path = '/account/{id}/daily_balance'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_id_daily_balance_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_id_daily_balance_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete account
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_id_delete(id, opts = {})
      account_id_delete_with_http_info(id, opts)
      nil
    end

    # delete account
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def account_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_id_delete"
      end
      # resource path
      local_var_path = '/account/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get account
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AccountIdDelete200Response]
    def account_id_get(id, opts = {})
      data, _status_code, _headers = account_id_get_with_http_info(id, opts)
      data
    end

    # get account
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountIdDelete200Response, Integer, Hash)>] AccountIdDelete200Response data, response status code and response headers
    def account_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_id_get"
      end
      # resource path
      local_var_path = '/account/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountIdDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update account
    # @param id [String] 
    # @param account_id_delete_request [AccountIdDeleteRequest] The account to update
    # @param [Hash] opts the optional parameters
    # @return [AccountIdDelete200Response]
    def account_id_patch(id, account_id_delete_request, opts = {})
      data, _status_code, _headers = account_id_patch_with_http_info(id, account_id_delete_request, opts)
      data
    end

    # update account
    # @param id [String] 
    # @param account_id_delete_request [AccountIdDeleteRequest] The account to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountIdDelete200Response, Integer, Hash)>] AccountIdDelete200Response data, response status code and response headers
    def account_id_patch_with_http_info(id, account_id_delete_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_id_patch"
      end
      # verify the required parameter 'account_id_delete_request' is set
      if @api_client.config.client_side_validation && account_id_delete_request.nil?
        fail ArgumentError, "Missing the required parameter 'account_id_delete_request' when calling DefaultApi.account_id_patch"
      end
      # resource path
      local_var_path = '/account/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_id_delete_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountIdDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get account.statement.file
    # @param id [String] 
    # @param file_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AccountIdTaxDocumentFileIdGet200Response]
    def account_id_statement_file_id_get(id, file_id, opts = {})
      data, _status_code, _headers = account_id_statement_file_id_get_with_http_info(id, file_id, opts)
      data
    end

    # get account.statement.file
    # @param id [String] 
    # @param file_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountIdTaxDocumentFileIdGet200Response, Integer, Hash)>] AccountIdTaxDocumentFileIdGet200Response data, response status code and response headers
    def account_id_statement_file_id_get_with_http_info(id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_id_statement_file_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_id_statement_file_id_get"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling DefaultApi.account_id_statement_file_id_get"
      end
      # resource path
      local_var_path = '/account/{id}/statement/{file_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountIdTaxDocumentFileIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_id_statement_file_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_id_statement_file_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Statements
    # At the end of every month, statements are generated for every account. The monthly statement lists the transactions for the month, the change in balance, and any interest accrued. This endpoint returns a URL to an account statement, or an error if none are available. The URL will serve a PDF of the statement itself.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AccountIdStatementGet200Response]
    def account_id_statement_get(id, opts = {})
      data, _status_code, _headers = account_id_statement_get_with_http_info(id, opts)
      data
    end

    # Retrieve Statements
    # At the end of every month, statements are generated for every account. The monthly statement lists the transactions for the month, the change in balance, and any interest accrued. This endpoint returns a URL to an account statement, or an error if none are available. The URL will serve a PDF of the statement itself.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountIdStatementGet200Response, Integer, Hash)>] AccountIdStatementGet200Response data, response status code and response headers
    def account_id_statement_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_id_statement_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_id_statement_get"
      end
      # resource path
      local_var_path = '/account/{id}/statement'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountIdStatementGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_id_statement_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_id_statement_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get account.tax_document.file
    # @param id [String] 
    # @param file_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AccountIdTaxDocumentFileIdGet200Response]
    def account_id_tax_document_file_id_get(id, file_id, opts = {})
      data, _status_code, _headers = account_id_tax_document_file_id_get_with_http_info(id, file_id, opts)
      data
    end

    # get account.tax_document.file
    # @param id [String] 
    # @param file_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountIdTaxDocumentFileIdGet200Response, Integer, Hash)>] AccountIdTaxDocumentFileIdGet200Response data, response status code and response headers
    def account_id_tax_document_file_id_get_with_http_info(id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_id_tax_document_file_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_id_tax_document_file_id_get"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling DefaultApi.account_id_tax_document_file_id_get"
      end
      # resource path
      local_var_path = '/account/{id}/tax_document/{file_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountIdTaxDocumentFileIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_id_tax_document_file_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_id_tax_document_file_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get account.tax_document
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AccountIdTaxDocumentGet200Response]
    def account_id_tax_document_get(id, opts = {})
      data, _status_code, _headers = account_id_tax_document_get_with_http_info(id, opts)
      data
    end

    # get account.tax_document
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountIdTaxDocumentGet200Response, Integer, Hash)>] AccountIdTaxDocumentGet200Response data, response status code and response headers
    def account_id_tax_document_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_id_tax_document_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_id_tax_document_get"
      end
      # resource path
      local_var_path = '/account/{id}/tax_document'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountIdTaxDocumentGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_id_tax_document_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_id_tax_document_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get-index account.transaction
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_id_transaction_get(id, opts = {})
      account_id_transaction_get_with_http_info(id, opts)
      nil
    end

    # get-index account.transaction
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def account_id_transaction_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_id_transaction_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_id_transaction_get"
      end
      # resource path
      local_var_path = '/account/{id}/transaction'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_id_transaction_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_id_transaction_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create account-number
    # @param account_number_post_request [AccountNumberPostRequest] The account-number to create
    # @param [Hash] opts the optional parameters
    # @return [AccountNumberPost200Response]
    def account_number_post(account_number_post_request, opts = {})
      data, _status_code, _headers = account_number_post_with_http_info(account_number_post_request, opts)
      data
    end

    # create account-number
    # @param account_number_post_request [AccountNumberPostRequest] The account-number to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountNumberPost200Response, Integer, Hash)>] AccountNumberPost200Response data, response status code and response headers
    def account_number_post_with_http_info(account_number_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_number_post ...'
      end
      # verify the required parameter 'account_number_post_request' is set
      if @api_client.config.client_side_validation && account_number_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'account_number_post_request' when calling DefaultApi.account_number_post"
      end
      # resource path
      local_var_path = '/account_number'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_number_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountNumberPost200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_number_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_number_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an Account Number Reservation
    # @param [Hash] opts the optional parameters
    # @return [Array<AccountNumberReservationGet200ResponseInner>]
    def account_number_reservation_get(opts = {})
      data, _status_code, _headers = account_number_reservation_get_with_http_info(opts)
      data
    end

    # Retrieve an Account Number Reservation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AccountNumberReservationGet200ResponseInner>, Integer, Hash)>] Array<AccountNumberReservationGet200ResponseInner> data, response status code and response headers
    def account_number_reservation_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_number_reservation_get ...'
      end
      # resource path
      local_var_path = '/account_number_reservation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AccountNumberReservationGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_number_reservation_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_number_reservation_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get account-number-reservation
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AccountNumberReservationGet200ResponseInner]
    def account_number_reservation_id_get(id, opts = {})
      data, _status_code, _headers = account_number_reservation_id_get_with_http_info(id, opts)
      data
    end

    # get account-number-reservation
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountNumberReservationGet200ResponseInner, Integer, Hash)>] AccountNumberReservationGet200ResponseInner data, response status code and response headers
    def account_number_reservation_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_number_reservation_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.account_number_reservation_id_get"
      end
      # resource path
      local_var_path = '/account_number_reservation/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountNumberReservationGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_number_reservation_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_number_reservation_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Account Number Reservation
    # By default, accounts created through the Treasury Prime API are assigned system-generated account numbers at the time of account creation. However, certain integrations require knowing the account number that will be assigned prior to account creation. For those scenarios the account_number_reservation endpoint can be used to pre-allocate an account number when submitting an account application.
    # @param body [Object] The account-number-reservation to create
    # @param [Hash] opts the optional parameters
    # @return [AccountNumberReservationGet200ResponseInner]
    def account_number_reservation_post(body, opts = {})
      data, _status_code, _headers = account_number_reservation_post_with_http_info(body, opts)
      data
    end

    # Create an Account Number Reservation
    # By default, accounts created through the Treasury Prime API are assigned system-generated account numbers at the time of account creation. However, certain integrations require knowing the account number that will be assigned prior to account creation. For those scenarios the account_number_reservation endpoint can be used to pre-allocate an account number when submitting an account application.
    # @param body [Object] The account-number-reservation to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountNumberReservationGet200ResponseInner, Integer, Hash)>] AccountNumberReservationGet200ResponseInner data, response status code and response headers
    def account_number_reservation_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_number_reservation_post ...'
      end
      # resource path
      local_var_path = '/account_number_reservation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountNumberReservationGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_number_reservation_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_number_reservation_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create account.create
    # @param account_get_request [AccountGetRequest] The account.create to create
    # @param [Hash] opts the optional parameters
    # @return [AccountGet200Response]
    def account_post(account_get_request, opts = {})
      data, _status_code, _headers = account_post_with_http_info(account_get_request, opts)
      data
    end

    # create account.create
    # @param account_get_request [AccountGetRequest] The account.create to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountGet200Response, Integer, Hash)>] AccountGet200Response data, response status code and response headers
    def account_post_with_http_info(account_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_post ...'
      end
      # verify the required parameter 'account_get_request' is set
      if @api_client.config.client_side_validation && account_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'account_get_request' when calling DefaultApi.account_post"
      end
      # resource path
      local_var_path = '/account'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index account_product
    # @param [Hash] opts the optional parameters
    # @return [Array<AccountProductGet200ResponseInner>]
    def account_product_get(opts = {})
      data, _status_code, _headers = account_product_get_with_http_info(opts)
      data
    end

    # index account_product
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AccountProductGet200ResponseInner>, Integer, Hash)>] Array<AccountProductGet200ResponseInner> data, response status code and response headers
    def account_product_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_product_get ...'
      end
      # resource path
      local_var_path = '/account_product'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AccountProductGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_product_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_product_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get account_product
    # @param [Hash] opts the optional parameters
    # @return [AccountProductGet200ResponseInner]
    def account_product_id_get(opts = {})
      data, _status_code, _headers = account_product_id_get_with_http_info(opts)
      data
    end

    # get account_product
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountProductGet200ResponseInner, Integer, Hash)>] AccountProductGet200ResponseInner data, response status code and response headers
    def account_product_id_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_product_id_get ...'
      end
      # resource path
      local_var_path = '/account_product/{id}'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountProductGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.account_product_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_product_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List All ACH Transfers
    # Returns a list of all existing ACH transfers that you have created, or an empty list if none are available.
    # @param [Hash] opts the optional parameters
    # @return [Array<AchGet200ResponseInner>]
    def ach_get(opts = {})
      data, _status_code, _headers = ach_get_with_http_info(opts)
      data
    end

    # List All ACH Transfers
    # Returns a list of all existing ACH transfers that you have created, or an empty list if none are available.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AchGet200ResponseInner>, Integer, Hash)>] Array<AchGet200ResponseInner> data, response status code and response headers
    def ach_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ach_get ...'
      end
      # resource path
      local_var_path = '/ach'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AchGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.ach_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ach_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get ach
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AchGet200ResponseInner]
    def ach_id_get(id, opts = {})
      data, _status_code, _headers = ach_id_get_with_http_info(id, opts)
      data
    end

    # get ach
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AchGet200ResponseInner, Integer, Hash)>] AchGet200ResponseInner data, response status code and response headers
    def ach_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ach_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.ach_id_get"
      end
      # resource path
      local_var_path = '/ach/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AchGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.ach_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ach_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update ach
    # @param id [String] 
    # @param ach_id_get_request [AchIdGetRequest] The ach to update
    # @param [Hash] opts the optional parameters
    # @return [AchGet200ResponseInner]
    def ach_id_patch(id, ach_id_get_request, opts = {})
      data, _status_code, _headers = ach_id_patch_with_http_info(id, ach_id_get_request, opts)
      data
    end

    # update ach
    # @param id [String] 
    # @param ach_id_get_request [AchIdGetRequest] The ach to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(AchGet200ResponseInner, Integer, Hash)>] AchGet200ResponseInner data, response status code and response headers
    def ach_id_patch_with_http_info(id, ach_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ach_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.ach_id_patch"
      end
      # verify the required parameter 'ach_id_get_request' is set
      if @api_client.config.client_side_validation && ach_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'ach_id_get_request' when calling DefaultApi.ach_id_patch"
      end
      # resource path
      local_var_path = '/ach/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ach_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AchGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.ach_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ach_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an ACH
    # To initiate a new ACH transfer, you create a new ACH object.
    # @param ach_get_request [AchGetRequest] The ach to create
    # @param [Hash] opts the optional parameters
    # @return [AchGet200ResponseInner]
    def ach_post(ach_get_request, opts = {})
      data, _status_code, _headers = ach_post_with_http_info(ach_get_request, opts)
      data
    end

    # Create an ACH
    # To initiate a new ACH transfer, you create a new ACH object.
    # @param ach_get_request [AchGetRequest] The ach to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(AchGet200ResponseInner, Integer, Hash)>] AchGet200ResponseInner data, response status code and response headers
    def ach_post_with_http_info(ach_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ach_post ...'
      end
      # verify the required parameter 'ach_get_request' is set
      if @api_client.config.client_side_validation && ach_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'ach_get_request' when calling DefaultApi.ach_post"
      end
      # resource path
      local_var_path = '/ach'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ach_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AchGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.ach_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ach_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve All Account Applications
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Application ID
    # @return [nil]
    def apply_account_application_get(opts = {})
      apply_account_application_get_with_http_info(opts)
      nil
    end

    # Retrieve All Account Applications
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Application ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apply_account_application_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_account_application_get ...'
      end
      # resource path
      local_var_path = '/apply/account_application'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_account_application_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_account_application_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get apply.account-application
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyAccountApplicationIdGet200Response]
    def apply_account_application_id_get(id, opts = {})
      data, _status_code, _headers = apply_account_application_id_get_with_http_info(id, opts)
      data
    end

    # get apply.account-application
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyAccountApplicationIdGet200Response, Integer, Hash)>] ApplyAccountApplicationIdGet200Response data, response status code and response headers
    def apply_account_application_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_account_application_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_account_application_id_get"
      end
      # resource path
      local_var_path = '/apply/account_application/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyAccountApplicationIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_account_application_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_account_application_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update apply.account-application
    # @param id [String] 
    # @param apply_account_application_id_get_request [ApplyAccountApplicationIdGetRequest] The apply.account-application to update
    # @param [Hash] opts the optional parameters
    # @return [ApplyAccountApplicationIdGet200Response]
    def apply_account_application_id_patch(id, apply_account_application_id_get_request, opts = {})
      data, _status_code, _headers = apply_account_application_id_patch_with_http_info(id, apply_account_application_id_get_request, opts)
      data
    end

    # update apply.account-application
    # @param id [String] 
    # @param apply_account_application_id_get_request [ApplyAccountApplicationIdGetRequest] The apply.account-application to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyAccountApplicationIdGet200Response, Integer, Hash)>] ApplyAccountApplicationIdGet200Response data, response status code and response headers
    def apply_account_application_id_patch_with_http_info(id, apply_account_application_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_account_application_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_account_application_id_patch"
      end
      # verify the required parameter 'apply_account_application_id_get_request' is set
      if @api_client.config.client_side_validation && apply_account_application_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_account_application_id_get_request' when calling DefaultApi.apply_account_application_id_patch"
      end
      # resource path
      local_var_path = '/apply/account_application/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_account_application_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyAccountApplicationIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_account_application_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_account_application_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Account Application
    # To create an application for a new bank account, create an Account Application object.  This example demonstrates the creation of a Personal account. Business accounts are very similar, but will utilize a few different fields. Please see [https://developers.treasuryprime.com/guides/open-accounts](https://developers.treasuryprime.com/guides/open-accounts) for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [ApplyAccountApplicationGetRequest] :apply_account_application_get_request 
    # @return [String]
    def apply_account_application_post(opts = {})
      data, _status_code, _headers = apply_account_application_post_with_http_info(opts)
      data
    end

    # Create Account Application
    # To create an application for a new bank account, create an Account Application object.  This example demonstrates the creation of a Personal account. Business accounts are very similar, but will utilize a few different fields. Please see [https://developers.treasuryprime.com/guides/open-accounts](https://developers.treasuryprime.com/guides/open-accounts) for more information.
    # @param [Hash] opts the optional parameters
    # @option opts [ApplyAccountApplicationGetRequest] :apply_account_application_get_request 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def apply_account_application_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_account_application_post ...'
      end
      # resource path
      local_var_path = '/apply/account_application'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'apply_account_application_get_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_account_application_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_account_application_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index apply.additional-person-application
    # @param [Hash] opts the optional parameters
    # @return [Array<ApplyAdditionalPersonApplicationIdGet200Response>]
    def apply_additional_person_application_get(opts = {})
      data, _status_code, _headers = apply_additional_person_application_get_with_http_info(opts)
      data
    end

    # index apply.additional-person-application
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApplyAdditionalPersonApplicationIdGet200Response>, Integer, Hash)>] Array<ApplyAdditionalPersonApplicationIdGet200Response> data, response status code and response headers
    def apply_additional_person_application_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_additional_person_application_get ...'
      end
      # resource path
      local_var_path = '/apply/additional_person_application'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApplyAdditionalPersonApplicationIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_additional_person_application_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_additional_person_application_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an Additional Person Application
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyAdditionalPersonApplicationIdGet200Response]
    def apply_additional_person_application_id_get(id, opts = {})
      data, _status_code, _headers = apply_additional_person_application_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve an Additional Person Application
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyAdditionalPersonApplicationIdGet200Response, Integer, Hash)>] ApplyAdditionalPersonApplicationIdGet200Response data, response status code and response headers
    def apply_additional_person_application_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_additional_person_application_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_additional_person_application_id_get"
      end
      # resource path
      local_var_path = '/apply/additional_person_application/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyAdditionalPersonApplicationIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_additional_person_application_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_additional_person_application_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Additional Person Applications
    # Updates the specified Additional Person Application by setting the values of the passed parameters. Any parameters not provided will be left unchanged. Note: only the userdata parameter is permitted to change.
    # @param id [String] 
    # @param apply_additional_person_application_id_get_request [ApplyAdditionalPersonApplicationIdGetRequest] The apply.additional-person-application to update
    # @param [Hash] opts the optional parameters
    # @return [ApplyAdditionalPersonApplicationIdGet200Response]
    def apply_additional_person_application_id_patch(id, apply_additional_person_application_id_get_request, opts = {})
      data, _status_code, _headers = apply_additional_person_application_id_patch_with_http_info(id, apply_additional_person_application_id_get_request, opts)
      data
    end

    # Update an Additional Person Applications
    # Updates the specified Additional Person Application by setting the values of the passed parameters. Any parameters not provided will be left unchanged. Note: only the userdata parameter is permitted to change.
    # @param id [String] 
    # @param apply_additional_person_application_id_get_request [ApplyAdditionalPersonApplicationIdGetRequest] The apply.additional-person-application to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyAdditionalPersonApplicationIdGet200Response, Integer, Hash)>] ApplyAdditionalPersonApplicationIdGet200Response data, response status code and response headers
    def apply_additional_person_application_id_patch_with_http_info(id, apply_additional_person_application_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_additional_person_application_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_additional_person_application_id_patch"
      end
      # verify the required parameter 'apply_additional_person_application_id_get_request' is set
      if @api_client.config.client_side_validation && apply_additional_person_application_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_additional_person_application_id_get_request' when calling DefaultApi.apply_additional_person_application_id_patch"
      end
      # resource path
      local_var_path = '/apply/additional_person_application/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_additional_person_application_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyAdditionalPersonApplicationIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_additional_person_application_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_additional_person_application_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create apply.additional-person-application
    # @param apply_additional_person_application_get_request [ApplyAdditionalPersonApplicationGetRequest] The apply.additional-person-application to create
    # @param [Hash] opts the optional parameters
    # @return [ApplyAdditionalPersonApplicationIdGet200Response]
    def apply_additional_person_application_post(apply_additional_person_application_get_request, opts = {})
      data, _status_code, _headers = apply_additional_person_application_post_with_http_info(apply_additional_person_application_get_request, opts)
      data
    end

    # create apply.additional-person-application
    # @param apply_additional_person_application_get_request [ApplyAdditionalPersonApplicationGetRequest] The apply.additional-person-application to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyAdditionalPersonApplicationIdGet200Response, Integer, Hash)>] ApplyAdditionalPersonApplicationIdGet200Response data, response status code and response headers
    def apply_additional_person_application_post_with_http_info(apply_additional_person_application_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_additional_person_application_post ...'
      end
      # verify the required parameter 'apply_additional_person_application_get_request' is set
      if @api_client.config.client_side_validation && apply_additional_person_application_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_additional_person_application_get_request' when calling DefaultApi.apply_additional_person_application_post"
      end
      # resource path
      local_var_path = '/apply/additional_person_application'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_additional_person_application_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyAdditionalPersonApplicationIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_additional_person_application_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_additional_person_application_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index apply.authorized-user-application
    # @param [Hash] opts the optional parameters
    # @return [Array<ApplyAuthorizedUserApplicationGet200ResponseInner>]
    def apply_authorized_user_application_get(opts = {})
      data, _status_code, _headers = apply_authorized_user_application_get_with_http_info(opts)
      data
    end

    # index apply.authorized-user-application
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApplyAuthorizedUserApplicationGet200ResponseInner>, Integer, Hash)>] Array<ApplyAuthorizedUserApplicationGet200ResponseInner> data, response status code and response headers
    def apply_authorized_user_application_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_authorized_user_application_get ...'
      end
      # resource path
      local_var_path = '/apply/authorized_user_application'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApplyAuthorizedUserApplicationGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_authorized_user_application_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_authorized_user_application_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get apply.authorized-user-application
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyAuthorizedUserApplicationGet200ResponseInner]
    def apply_authorized_user_application_id_get(id, opts = {})
      data, _status_code, _headers = apply_authorized_user_application_id_get_with_http_info(id, opts)
      data
    end

    # get apply.authorized-user-application
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyAuthorizedUserApplicationGet200ResponseInner, Integer, Hash)>] ApplyAuthorizedUserApplicationGet200ResponseInner data, response status code and response headers
    def apply_authorized_user_application_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_authorized_user_application_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_authorized_user_application_id_get"
      end
      # resource path
      local_var_path = '/apply/authorized_user_application/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyAuthorizedUserApplicationGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_authorized_user_application_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_authorized_user_application_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update apply.authorized-user-application
    # @param id [String] 
    # @param apply_authorized_user_application_id_get_request [ApplyAuthorizedUserApplicationIdGetRequest] The apply.authorized-user-application to update
    # @param [Hash] opts the optional parameters
    # @return [ApplyAuthorizedUserApplicationGet200ResponseInner]
    def apply_authorized_user_application_id_patch(id, apply_authorized_user_application_id_get_request, opts = {})
      data, _status_code, _headers = apply_authorized_user_application_id_patch_with_http_info(id, apply_authorized_user_application_id_get_request, opts)
      data
    end

    # update apply.authorized-user-application
    # @param id [String] 
    # @param apply_authorized_user_application_id_get_request [ApplyAuthorizedUserApplicationIdGetRequest] The apply.authorized-user-application to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyAuthorizedUserApplicationGet200ResponseInner, Integer, Hash)>] ApplyAuthorizedUserApplicationGet200ResponseInner data, response status code and response headers
    def apply_authorized_user_application_id_patch_with_http_info(id, apply_authorized_user_application_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_authorized_user_application_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_authorized_user_application_id_patch"
      end
      # verify the required parameter 'apply_authorized_user_application_id_get_request' is set
      if @api_client.config.client_side_validation && apply_authorized_user_application_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_authorized_user_application_id_get_request' when calling DefaultApi.apply_authorized_user_application_id_patch"
      end
      # resource path
      local_var_path = '/apply/authorized_user_application/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_authorized_user_application_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyAuthorizedUserApplicationGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_authorized_user_application_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_authorized_user_application_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create apply.authorized-user-application
    # @param apply_authorized_user_application_get_request [ApplyAuthorizedUserApplicationGetRequest] The apply.authorized-user-application to create
    # @param [Hash] opts the optional parameters
    # @return [ApplyAuthorizedUserApplicationGet200ResponseInner]
    def apply_authorized_user_application_post(apply_authorized_user_application_get_request, opts = {})
      data, _status_code, _headers = apply_authorized_user_application_post_with_http_info(apply_authorized_user_application_get_request, opts)
      data
    end

    # create apply.authorized-user-application
    # @param apply_authorized_user_application_get_request [ApplyAuthorizedUserApplicationGetRequest] The apply.authorized-user-application to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyAuthorizedUserApplicationGet200ResponseInner, Integer, Hash)>] ApplyAuthorizedUserApplicationGet200ResponseInner data, response status code and response headers
    def apply_authorized_user_application_post_with_http_info(apply_authorized_user_application_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_authorized_user_application_post ...'
      end
      # verify the required parameter 'apply_authorized_user_application_get_request' is set
      if @api_client.config.client_side_validation && apply_authorized_user_application_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_authorized_user_application_get_request' when calling DefaultApi.apply_authorized_user_application_post"
      end
      # resource path
      local_var_path = '/apply/authorized_user_application'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_authorized_user_application_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyAuthorizedUserApplicationGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_authorized_user_application_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_authorized_user_application_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index apply.business-application
    # @param [Hash] opts the optional parameters
    # @return [Array<ApplyBusinessApplicationIdGet200Response>]
    def apply_business_application_get(opts = {})
      data, _status_code, _headers = apply_business_application_get_with_http_info(opts)
      data
    end

    # index apply.business-application
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApplyBusinessApplicationIdGet200Response>, Integer, Hash)>] Array<ApplyBusinessApplicationIdGet200Response> data, response status code and response headers
    def apply_business_application_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_business_application_get ...'
      end
      # resource path
      local_var_path = '/apply/business_application'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApplyBusinessApplicationIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_business_application_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_business_application_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get apply.business-application
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyBusinessApplicationIdGet200Response]
    def apply_business_application_id_get(id, opts = {})
      data, _status_code, _headers = apply_business_application_id_get_with_http_info(id, opts)
      data
    end

    # get apply.business-application
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyBusinessApplicationIdGet200Response, Integer, Hash)>] ApplyBusinessApplicationIdGet200Response data, response status code and response headers
    def apply_business_application_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_business_application_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_business_application_id_get"
      end
      # resource path
      local_var_path = '/apply/business_application/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyBusinessApplicationIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_business_application_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_business_application_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update apply.business-application
    # @param id [String] 
    # @param apply_business_application_id_get_request [ApplyBusinessApplicationIdGetRequest] The apply.business-application to update
    # @param [Hash] opts the optional parameters
    # @return [ApplyBusinessApplicationIdGet200Response]
    def apply_business_application_id_patch(id, apply_business_application_id_get_request, opts = {})
      data, _status_code, _headers = apply_business_application_id_patch_with_http_info(id, apply_business_application_id_get_request, opts)
      data
    end

    # update apply.business-application
    # @param id [String] 
    # @param apply_business_application_id_get_request [ApplyBusinessApplicationIdGetRequest] The apply.business-application to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyBusinessApplicationIdGet200Response, Integer, Hash)>] ApplyBusinessApplicationIdGet200Response data, response status code and response headers
    def apply_business_application_id_patch_with_http_info(id, apply_business_application_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_business_application_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_business_application_id_patch"
      end
      # verify the required parameter 'apply_business_application_id_get_request' is set
      if @api_client.config.client_side_validation && apply_business_application_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_business_application_id_get_request' when calling DefaultApi.apply_business_application_id_patch"
      end
      # resource path
      local_var_path = '/apply/business_application/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_business_application_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyBusinessApplicationIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_business_application_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_business_application_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create apply.business-application
    # @param apply_business_application_get_request [ApplyBusinessApplicationGetRequest] The apply.business-application to create
    # @param [Hash] opts the optional parameters
    # @return [ApplyBusinessApplicationIdGet200Response]
    def apply_business_application_post(apply_business_application_get_request, opts = {})
      data, _status_code, _headers = apply_business_application_post_with_http_info(apply_business_application_get_request, opts)
      data
    end

    # create apply.business-application
    # @param apply_business_application_get_request [ApplyBusinessApplicationGetRequest] The apply.business-application to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyBusinessApplicationIdGet200Response, Integer, Hash)>] ApplyBusinessApplicationIdGet200Response data, response status code and response headers
    def apply_business_application_post_with_http_info(apply_business_application_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_business_application_post ...'
      end
      # verify the required parameter 'apply_business_application_get_request' is set
      if @api_client.config.client_side_validation && apply_business_application_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_business_application_get_request' when calling DefaultApi.apply_business_application_post"
      end
      # resource path
      local_var_path = '/apply/business_application'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_business_application_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyBusinessApplicationIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_business_application_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_business_application_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index apply.compliance
    # @param [Hash] opts the optional parameters
    # @return [Array<ApplyComplianceGet200ResponseInner>]
    def apply_compliance_get(opts = {})
      data, _status_code, _headers = apply_compliance_get_with_http_info(opts)
      data
    end

    # index apply.compliance
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApplyComplianceGet200ResponseInner>, Integer, Hash)>] Array<ApplyComplianceGet200ResponseInner> data, response status code and response headers
    def apply_compliance_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_compliance_get ...'
      end
      # resource path
      local_var_path = '/apply/compliance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApplyComplianceGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_compliance_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_compliance_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get apply.compliance
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyComplianceGet200ResponseInner]
    def apply_compliance_id_get(id, opts = {})
      data, _status_code, _headers = apply_compliance_id_get_with_http_info(id, opts)
      data
    end

    # get apply.compliance
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyComplianceGet200ResponseInner, Integer, Hash)>] ApplyComplianceGet200ResponseInner data, response status code and response headers
    def apply_compliance_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_compliance_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_compliance_id_get"
      end
      # resource path
      local_var_path = '/apply/compliance/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyComplianceGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_compliance_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_compliance_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create apply.compliance
    # @param apply_compliance_get_request [ApplyComplianceGetRequest] The apply.compliance to create
    # @param [Hash] opts the optional parameters
    # @return [ApplyComplianceGet200ResponseInner]
    def apply_compliance_post(apply_compliance_get_request, opts = {})
      data, _status_code, _headers = apply_compliance_post_with_http_info(apply_compliance_get_request, opts)
      data
    end

    # create apply.compliance
    # @param apply_compliance_get_request [ApplyComplianceGetRequest] The apply.compliance to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyComplianceGet200ResponseInner, Integer, Hash)>] ApplyComplianceGet200ResponseInner data, response status code and response headers
    def apply_compliance_post_with_http_info(apply_compliance_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_compliance_post ...'
      end
      # verify the required parameter 'apply_compliance_get_request' is set
      if @api_client.config.client_side_validation && apply_compliance_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_compliance_get_request' when calling DefaultApi.apply_compliance_post"
      end
      # resource path
      local_var_path = '/apply/compliance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_compliance_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyComplianceGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_compliance_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_compliance_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index apply.deposit
    # @param [Hash] opts the optional parameters
    # @return [Array<ApplyDepositIdGet200Response>]
    def apply_deposit_get(opts = {})
      data, _status_code, _headers = apply_deposit_get_with_http_info(opts)
      data
    end

    # index apply.deposit
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApplyDepositIdGet200Response>, Integer, Hash)>] Array<ApplyDepositIdGet200Response> data, response status code and response headers
    def apply_deposit_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_deposit_get ...'
      end
      # resource path
      local_var_path = '/apply/deposit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApplyDepositIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_deposit_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_deposit_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get apply.deposit
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyDepositIdGet200Response]
    def apply_deposit_id_get(id, opts = {})
      data, _status_code, _headers = apply_deposit_id_get_with_http_info(id, opts)
      data
    end

    # get apply.deposit
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyDepositIdGet200Response, Integer, Hash)>] ApplyDepositIdGet200Response data, response status code and response headers
    def apply_deposit_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_deposit_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_deposit_id_get"
      end
      # resource path
      local_var_path = '/apply/deposit/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyDepositIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_deposit_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_deposit_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create apply.deposit
    # @param apply_deposit_get_request [ApplyDepositGetRequest] The apply.deposit to create
    # @param [Hash] opts the optional parameters
    # @return [ApplyDepositIdGet200Response]
    def apply_deposit_post(apply_deposit_get_request, opts = {})
      data, _status_code, _headers = apply_deposit_post_with_http_info(apply_deposit_get_request, opts)
      data
    end

    # create apply.deposit
    # @param apply_deposit_get_request [ApplyDepositGetRequest] The apply.deposit to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyDepositIdGet200Response, Integer, Hash)>] ApplyDepositIdGet200Response data, response status code and response headers
    def apply_deposit_post_with_http_info(apply_deposit_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_deposit_post ...'
      end
      # verify the required parameter 'apply_deposit_get_request' is set
      if @api_client.config.client_side_validation && apply_deposit_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_deposit_get_request' when calling DefaultApi.apply_deposit_post"
      end
      # resource path
      local_var_path = '/apply/deposit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_deposit_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyDepositIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_deposit_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_deposit_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index apply.kyc
    # @param [Hash] opts the optional parameters
    # @return [Array<ApplyKycIdGet200Response>]
    def apply_kyc_get(opts = {})
      data, _status_code, _headers = apply_kyc_get_with_http_info(opts)
      data
    end

    # index apply.kyc
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApplyKycIdGet200Response>, Integer, Hash)>] Array<ApplyKycIdGet200Response> data, response status code and response headers
    def apply_kyc_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_kyc_get ...'
      end
      # resource path
      local_var_path = '/apply/kyc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApplyKycIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_kyc_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_kyc_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get apply.kyc
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyKycIdGet200Response]
    def apply_kyc_id_get(id, opts = {})
      data, _status_code, _headers = apply_kyc_id_get_with_http_info(id, opts)
      data
    end

    # get apply.kyc
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyKycIdGet200Response, Integer, Hash)>] ApplyKycIdGet200Response data, response status code and response headers
    def apply_kyc_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_kyc_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_kyc_id_get"
      end
      # resource path
      local_var_path = '/apply/kyc/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyKycIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_kyc_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_kyc_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create apply.kyc
    # @param apply_kyc_get_request [ApplyKycGetRequest] The apply.kyc to create
    # @param [Hash] opts the optional parameters
    # @return [ApplyKycIdGet200Response]
    def apply_kyc_post(apply_kyc_get_request, opts = {})
      data, _status_code, _headers = apply_kyc_post_with_http_info(apply_kyc_get_request, opts)
      data
    end

    # create apply.kyc
    # @param apply_kyc_get_request [ApplyKycGetRequest] The apply.kyc to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyKycIdGet200Response, Integer, Hash)>] ApplyKycIdGet200Response data, response status code and response headers
    def apply_kyc_post_with_http_info(apply_kyc_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_kyc_post ...'
      end
      # verify the required parameter 'apply_kyc_get_request' is set
      if @api_client.config.client_side_validation && apply_kyc_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_kyc_get_request' when calling DefaultApi.apply_kyc_post"
      end
      # resource path
      local_var_path = '/apply/kyc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_kyc_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyKycIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_kyc_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_kyc_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index apply.kyc-product
    # @param [Hash] opts the optional parameters
    # @return [Array<ApplyKycProductGet200ResponseInner>]
    def apply_kyc_product_get(opts = {})
      data, _status_code, _headers = apply_kyc_product_get_with_http_info(opts)
      data
    end

    # index apply.kyc-product
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApplyKycProductGet200ResponseInner>, Integer, Hash)>] Array<ApplyKycProductGet200ResponseInner> data, response status code and response headers
    def apply_kyc_product_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_kyc_product_get ...'
      end
      # resource path
      local_var_path = '/apply/kyc_product'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApplyKycProductGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_kyc_product_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_kyc_product_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get apply.kyc-product
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyKycProductGet200ResponseInner]
    def apply_kyc_product_id_get(id, opts = {})
      data, _status_code, _headers = apply_kyc_product_id_get_with_http_info(id, opts)
      data
    end

    # get apply.kyc-product
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyKycProductGet200ResponseInner, Integer, Hash)>] ApplyKycProductGet200ResponseInner data, response status code and response headers
    def apply_kyc_product_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_kyc_product_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_kyc_product_id_get"
      end
      # resource path
      local_var_path = '/apply/kyc_product/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyKycProductGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_kyc_product_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_kyc_product_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update apply.kyc-product
    # @param id [String] 
    # @param apply_kyc_product_id_get_request [ApplyKycProductIdGetRequest] The apply.kyc-product to update
    # @param [Hash] opts the optional parameters
    # @return [ApplyKycProductGet200ResponseInner]
    def apply_kyc_product_id_patch(id, apply_kyc_product_id_get_request, opts = {})
      data, _status_code, _headers = apply_kyc_product_id_patch_with_http_info(id, apply_kyc_product_id_get_request, opts)
      data
    end

    # update apply.kyc-product
    # @param id [String] 
    # @param apply_kyc_product_id_get_request [ApplyKycProductIdGetRequest] The apply.kyc-product to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyKycProductGet200ResponseInner, Integer, Hash)>] ApplyKycProductGet200ResponseInner data, response status code and response headers
    def apply_kyc_product_id_patch_with_http_info(id, apply_kyc_product_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_kyc_product_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_kyc_product_id_patch"
      end
      # verify the required parameter 'apply_kyc_product_id_get_request' is set
      if @api_client.config.client_side_validation && apply_kyc_product_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_kyc_product_id_get_request' when calling DefaultApi.apply_kyc_product_id_patch"
      end
      # resource path
      local_var_path = '/apply/kyc_product/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_kyc_product_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyKycProductGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_kyc_product_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_kyc_product_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create apply.kyc-product
    # @param apply_kyc_product_get_request [ApplyKycProductGetRequest] The apply.kyc-product to create
    # @param [Hash] opts the optional parameters
    # @return [ApplyKycProductGet200ResponseInner]
    def apply_kyc_product_post(apply_kyc_product_get_request, opts = {})
      data, _status_code, _headers = apply_kyc_product_post_with_http_info(apply_kyc_product_get_request, opts)
      data
    end

    # create apply.kyc-product
    # @param apply_kyc_product_get_request [ApplyKycProductGetRequest] The apply.kyc-product to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyKycProductGet200ResponseInner, Integer, Hash)>] ApplyKycProductGet200ResponseInner data, response status code and response headers
    def apply_kyc_product_post_with_http_info(apply_kyc_product_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_kyc_product_post ...'
      end
      # verify the required parameter 'apply_kyc_product_get_request' is set
      if @api_client.config.client_side_validation && apply_kyc_product_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_kyc_product_get_request' when calling DefaultApi.apply_kyc_product_post"
      end
      # resource path
      local_var_path = '/apply/kyc_product'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_kyc_product_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyKycProductGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_kyc_product_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_kyc_product_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index apply.parent-business
    # @param [Hash] opts the optional parameters
    # @return [Array<ApplyParentBusinessIdGet200Response>]
    def apply_parent_business_get(opts = {})
      data, _status_code, _headers = apply_parent_business_get_with_http_info(opts)
      data
    end

    # index apply.parent-business
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApplyParentBusinessIdGet200Response>, Integer, Hash)>] Array<ApplyParentBusinessIdGet200Response> data, response status code and response headers
    def apply_parent_business_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_parent_business_get ...'
      end
      # resource path
      local_var_path = '/apply/parent_business'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApplyParentBusinessIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_parent_business_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_parent_business_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get apply.parent-business
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyParentBusinessIdGet200Response]
    def apply_parent_business_id_get(id, opts = {})
      data, _status_code, _headers = apply_parent_business_id_get_with_http_info(id, opts)
      data
    end

    # get apply.parent-business
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyParentBusinessIdGet200Response, Integer, Hash)>] ApplyParentBusinessIdGet200Response data, response status code and response headers
    def apply_parent_business_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_parent_business_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_parent_business_id_get"
      end
      # resource path
      local_var_path = '/apply/parent_business/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyParentBusinessIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_parent_business_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_parent_business_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update apply.parent-business
    # @param id [String] 
    # @param apply_parent_business_id_get_request [ApplyParentBusinessIdGetRequest] The apply.parent-business to update
    # @param [Hash] opts the optional parameters
    # @return [ApplyParentBusinessIdGet200Response]
    def apply_parent_business_id_patch(id, apply_parent_business_id_get_request, opts = {})
      data, _status_code, _headers = apply_parent_business_id_patch_with_http_info(id, apply_parent_business_id_get_request, opts)
      data
    end

    # update apply.parent-business
    # @param id [String] 
    # @param apply_parent_business_id_get_request [ApplyParentBusinessIdGetRequest] The apply.parent-business to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyParentBusinessIdGet200Response, Integer, Hash)>] ApplyParentBusinessIdGet200Response data, response status code and response headers
    def apply_parent_business_id_patch_with_http_info(id, apply_parent_business_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_parent_business_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_parent_business_id_patch"
      end
      # verify the required parameter 'apply_parent_business_id_get_request' is set
      if @api_client.config.client_side_validation && apply_parent_business_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_parent_business_id_get_request' when calling DefaultApi.apply_parent_business_id_patch"
      end
      # resource path
      local_var_path = '/apply/parent_business/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_parent_business_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyParentBusinessIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_parent_business_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_parent_business_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create apply.parent-business
    # @param apply_parent_business_get_request [ApplyParentBusinessGetRequest] The apply.parent-business to create
    # @param [Hash] opts the optional parameters
    # @return [ApplyParentBusinessIdGet200Response]
    def apply_parent_business_post(apply_parent_business_get_request, opts = {})
      data, _status_code, _headers = apply_parent_business_post_with_http_info(apply_parent_business_get_request, opts)
      data
    end

    # create apply.parent-business
    # @param apply_parent_business_get_request [ApplyParentBusinessGetRequest] The apply.parent-business to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyParentBusinessIdGet200Response, Integer, Hash)>] ApplyParentBusinessIdGet200Response data, response status code and response headers
    def apply_parent_business_post_with_http_info(apply_parent_business_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_parent_business_post ...'
      end
      # verify the required parameter 'apply_parent_business_get_request' is set
      if @api_client.config.client_side_validation && apply_parent_business_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_parent_business_get_request' when calling DefaultApi.apply_parent_business_post"
      end
      # resource path
      local_var_path = '/apply/parent_business'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_parent_business_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyParentBusinessIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_parent_business_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_parent_business_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index apply.person-application
    # @param [Hash] opts the optional parameters
    # @return [Array<ApplyPersonApplicationGet200ResponseInner>]
    def apply_person_application_get(opts = {})
      data, _status_code, _headers = apply_person_application_get_with_http_info(opts)
      data
    end

    # index apply.person-application
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApplyPersonApplicationGet200ResponseInner>, Integer, Hash)>] Array<ApplyPersonApplicationGet200ResponseInner> data, response status code and response headers
    def apply_person_application_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_person_application_get ...'
      end
      # resource path
      local_var_path = '/apply/person_application'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApplyPersonApplicationGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_person_application_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_person_application_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get apply.person-application
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyPersonApplicationGet200ResponseInner]
    def apply_person_application_id_get(id, opts = {})
      data, _status_code, _headers = apply_person_application_id_get_with_http_info(id, opts)
      data
    end

    # get apply.person-application
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyPersonApplicationGet200ResponseInner, Integer, Hash)>] ApplyPersonApplicationGet200ResponseInner data, response status code and response headers
    def apply_person_application_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_person_application_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_person_application_id_get"
      end
      # resource path
      local_var_path = '/apply/person_application/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyPersonApplicationGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_person_application_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_person_application_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update apply.person-application
    # @param id [String] 
    # @param apply_person_application_id_get_request [ApplyPersonApplicationIdGetRequest] The apply.person-application to update
    # @param [Hash] opts the optional parameters
    # @return [ApplyPersonApplicationGet200ResponseInner]
    def apply_person_application_id_patch(id, apply_person_application_id_get_request, opts = {})
      data, _status_code, _headers = apply_person_application_id_patch_with_http_info(id, apply_person_application_id_get_request, opts)
      data
    end

    # update apply.person-application
    # @param id [String] 
    # @param apply_person_application_id_get_request [ApplyPersonApplicationIdGetRequest] The apply.person-application to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyPersonApplicationGet200ResponseInner, Integer, Hash)>] ApplyPersonApplicationGet200ResponseInner data, response status code and response headers
    def apply_person_application_id_patch_with_http_info(id, apply_person_application_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_person_application_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.apply_person_application_id_patch"
      end
      # verify the required parameter 'apply_person_application_id_get_request' is set
      if @api_client.config.client_side_validation && apply_person_application_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_person_application_id_get_request' when calling DefaultApi.apply_person_application_id_patch"
      end
      # resource path
      local_var_path = '/apply/person_application/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_person_application_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyPersonApplicationGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_person_application_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_person_application_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create apply.person-application
    # @param apply_person_application_get_request [ApplyPersonApplicationGetRequest] The apply.person-application to create
    # @param [Hash] opts the optional parameters
    # @return [ApplyPersonApplicationGet200ResponseInner]
    def apply_person_application_post(apply_person_application_get_request, opts = {})
      data, _status_code, _headers = apply_person_application_post_with_http_info(apply_person_application_get_request, opts)
      data
    end

    # create apply.person-application
    # @param apply_person_application_get_request [ApplyPersonApplicationGetRequest] The apply.person-application to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyPersonApplicationGet200ResponseInner, Integer, Hash)>] ApplyPersonApplicationGet200ResponseInner data, response status code and response headers
    def apply_person_application_post_with_http_info(apply_person_application_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.apply_person_application_post ...'
      end
      # verify the required parameter 'apply_person_application_get_request' is set
      if @api_client.config.client_side_validation && apply_person_application_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'apply_person_application_get_request' when calling DefaultApi.apply_person_application_post"
      end
      # resource path
      local_var_path = '/apply/person_application'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(apply_person_application_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyPersonApplicationGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.apply_person_application_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#apply_person_application_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index billpay_counterparty
    # @param [Hash] opts the optional parameters
    # @return [Array<BillpayCounterpartyIdGet200Response>]
    def billpay_counterparty_get(opts = {})
      data, _status_code, _headers = billpay_counterparty_get_with_http_info(opts)
      data
    end

    # index billpay_counterparty
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BillpayCounterpartyIdGet200Response>, Integer, Hash)>] Array<BillpayCounterpartyIdGet200Response> data, response status code and response headers
    def billpay_counterparty_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_counterparty_get ...'
      end
      # resource path
      local_var_path = '/billpay/counterparty'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BillpayCounterpartyIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_counterparty_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_counterparty_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Bill Pay Counterparty
    # A Bill Pay Counterparty represents the person or organization receiving the bill payment. Bill Pay Counterparties are similar to ordinary Counterparties but they have some key differences. The biggest difference is that the Bill Pay Counterparty is explicitly linked to a particular Account. Always be sure to use a Bill Pay Counterparty when accessing the Bill Pay APIs. Counterparties may be added manually or pre-populated with a Merchant's payment information. Payments to manually-added counterparties will be sent via direct check, whereas pre-populated merchants will be paid electronically.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BillpayCounterpartyIdGet200Response]
    def billpay_counterparty_id_get(id, opts = {})
      data, _status_code, _headers = billpay_counterparty_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a Bill Pay Counterparty
    # A Bill Pay Counterparty represents the person or organization receiving the bill payment. Bill Pay Counterparties are similar to ordinary Counterparties but they have some key differences. The biggest difference is that the Bill Pay Counterparty is explicitly linked to a particular Account. Always be sure to use a Bill Pay Counterparty when accessing the Bill Pay APIs. Counterparties may be added manually or pre-populated with a Merchant&#39;s payment information. Payments to manually-added counterparties will be sent via direct check, whereas pre-populated merchants will be paid electronically.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillpayCounterpartyIdGet200Response, Integer, Hash)>] BillpayCounterpartyIdGet200Response data, response status code and response headers
    def billpay_counterparty_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_counterparty_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.billpay_counterparty_id_get"
      end
      # resource path
      local_var_path = '/billpay/counterparty/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillpayCounterpartyIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_counterparty_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_counterparty_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update billpay_counterparty
    # @param id [String] 
    # @param billpay_counterparty_id_get_request [BillpayCounterpartyIdGetRequest] The billpay_counterparty to update
    # @param [Hash] opts the optional parameters
    # @return [BillpayCounterpartyIdGet200Response]
    def billpay_counterparty_id_patch(id, billpay_counterparty_id_get_request, opts = {})
      data, _status_code, _headers = billpay_counterparty_id_patch_with_http_info(id, billpay_counterparty_id_get_request, opts)
      data
    end

    # update billpay_counterparty
    # @param id [String] 
    # @param billpay_counterparty_id_get_request [BillpayCounterpartyIdGetRequest] The billpay_counterparty to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillpayCounterpartyIdGet200Response, Integer, Hash)>] BillpayCounterpartyIdGet200Response data, response status code and response headers
    def billpay_counterparty_id_patch_with_http_info(id, billpay_counterparty_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_counterparty_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.billpay_counterparty_id_patch"
      end
      # verify the required parameter 'billpay_counterparty_id_get_request' is set
      if @api_client.config.client_side_validation && billpay_counterparty_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'billpay_counterparty_id_get_request' when calling DefaultApi.billpay_counterparty_id_patch"
      end
      # resource path
      local_var_path = '/billpay/counterparty/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billpay_counterparty_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BillpayCounterpartyIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_counterparty_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_counterparty_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create billpay_counterparty
    # @param billpay_counterparty_get_request [BillpayCounterpartyGetRequest] The billpay_counterparty to create
    # @param [Hash] opts the optional parameters
    # @return [BillpayCounterpartyIdGet200Response]
    def billpay_counterparty_post(billpay_counterparty_get_request, opts = {})
      data, _status_code, _headers = billpay_counterparty_post_with_http_info(billpay_counterparty_get_request, opts)
      data
    end

    # create billpay_counterparty
    # @param billpay_counterparty_get_request [BillpayCounterpartyGetRequest] The billpay_counterparty to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillpayCounterpartyIdGet200Response, Integer, Hash)>] BillpayCounterpartyIdGet200Response data, response status code and response headers
    def billpay_counterparty_post_with_http_info(billpay_counterparty_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_counterparty_post ...'
      end
      # verify the required parameter 'billpay_counterparty_get_request' is set
      if @api_client.config.client_side_validation && billpay_counterparty_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'billpay_counterparty_get_request' when calling DefaultApi.billpay_counterparty_post"
      end
      # resource path
      local_var_path = '/billpay/counterparty'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billpay_counterparty_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BillpayCounterpartyIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_counterparty_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_counterparty_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get billpay_merchant
    # @param [Hash] opts the optional parameters
    # @return [BillpayMerchantGet200Response]
    def billpay_merchant_get(opts = {})
      data, _status_code, _headers = billpay_merchant_get_with_http_info(opts)
      data
    end

    # get billpay_merchant
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillpayMerchantGet200Response, Integer, Hash)>] BillpayMerchantGet200Response data, response status code and response headers
    def billpay_merchant_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_merchant_get ...'
      end
      # resource path
      local_var_path = '/billpay/merchant'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillpayMerchantGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_merchant_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_merchant_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index billpay_payment
    # @param [Hash] opts the optional parameters
    # @return [Array<BillpayPaymentIdGet200Response>]
    def billpay_payment_get(opts = {})
      data, _status_code, _headers = billpay_payment_get_with_http_info(opts)
      data
    end

    # index billpay_payment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BillpayPaymentIdGet200Response>, Integer, Hash)>] Array<BillpayPaymentIdGet200Response> data, response status code and response headers
    def billpay_payment_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_payment_get ...'
      end
      # resource path
      local_var_path = '/billpay/payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BillpayPaymentIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_payment_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_payment_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get billpay_payment
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BillpayPaymentIdGet200Response]
    def billpay_payment_id_get(id, opts = {})
      data, _status_code, _headers = billpay_payment_id_get_with_http_info(id, opts)
      data
    end

    # get billpay_payment
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillpayPaymentIdGet200Response, Integer, Hash)>] BillpayPaymentIdGet200Response data, response status code and response headers
    def billpay_payment_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_payment_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.billpay_payment_id_get"
      end
      # resource path
      local_var_path = '/billpay/payment/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillpayPaymentIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_payment_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_payment_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update billpay_payment
    # @param id [String] 
    # @param billpay_payment_id_get_request [BillpayPaymentIdGetRequest] The billpay_payment to update
    # @param [Hash] opts the optional parameters
    # @return [BillpayPaymentIdGet200Response]
    def billpay_payment_id_patch(id, billpay_payment_id_get_request, opts = {})
      data, _status_code, _headers = billpay_payment_id_patch_with_http_info(id, billpay_payment_id_get_request, opts)
      data
    end

    # update billpay_payment
    # @param id [String] 
    # @param billpay_payment_id_get_request [BillpayPaymentIdGetRequest] The billpay_payment to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillpayPaymentIdGet200Response, Integer, Hash)>] BillpayPaymentIdGet200Response data, response status code and response headers
    def billpay_payment_id_patch_with_http_info(id, billpay_payment_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_payment_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.billpay_payment_id_patch"
      end
      # verify the required parameter 'billpay_payment_id_get_request' is set
      if @api_client.config.client_side_validation && billpay_payment_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'billpay_payment_id_get_request' when calling DefaultApi.billpay_payment_id_patch"
      end
      # resource path
      local_var_path = '/billpay/payment/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billpay_payment_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BillpayPaymentIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_payment_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_payment_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create billpay_payment
    # @param billpay_payment_get_request [BillpayPaymentGetRequest] The billpay_payment to create
    # @param [Hash] opts the optional parameters
    # @return [BillpayPaymentIdGet200Response]
    def billpay_payment_post(billpay_payment_get_request, opts = {})
      data, _status_code, _headers = billpay_payment_post_with_http_info(billpay_payment_get_request, opts)
      data
    end

    # create billpay_payment
    # @param billpay_payment_get_request [BillpayPaymentGetRequest] The billpay_payment to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillpayPaymentIdGet200Response, Integer, Hash)>] BillpayPaymentIdGet200Response data, response status code and response headers
    def billpay_payment_post_with_http_info(billpay_payment_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_payment_post ...'
      end
      # verify the required parameter 'billpay_payment_get_request' is set
      if @api_client.config.client_side_validation && billpay_payment_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'billpay_payment_get_request' when calling DefaultApi.billpay_payment_post"
      end
      # resource path
      local_var_path = '/billpay/payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billpay_payment_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BillpayPaymentIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_payment_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_payment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index billpay_rule
    # @param [Hash] opts the optional parameters
    # @return [Array<BillpayRuleIdGet200Response>]
    def billpay_rule_get(opts = {})
      data, _status_code, _headers = billpay_rule_get_with_http_info(opts)
      data
    end

    # index billpay_rule
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BillpayRuleIdGet200Response>, Integer, Hash)>] Array<BillpayRuleIdGet200Response> data, response status code and response headers
    def billpay_rule_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_rule_get ...'
      end
      # resource path
      local_var_path = '/billpay/rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BillpayRuleIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_rule_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_rule_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Rule
    # A Rule represents a template for a recurring bill payment. Each Rule contains all the parameters necessary for creating a Payment plus some additional parameters to control the recurring schedule. The bill pay service periodically runs each rule and determines if a new payment needs to be made; if so, the payment is created and will subsequently appear in calls to /billpay/payment.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BillpayRuleIdGet200Response]
    def billpay_rule_id_get(id, opts = {})
      data, _status_code, _headers = billpay_rule_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a Rule
    # A Rule represents a template for a recurring bill payment. Each Rule contains all the parameters necessary for creating a Payment plus some additional parameters to control the recurring schedule. The bill pay service periodically runs each rule and determines if a new payment needs to be made; if so, the payment is created and will subsequently appear in calls to /billpay/payment.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillpayRuleIdGet200Response, Integer, Hash)>] BillpayRuleIdGet200Response data, response status code and response headers
    def billpay_rule_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_rule_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.billpay_rule_id_get"
      end
      # resource path
      local_var_path = '/billpay/rule/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillpayRuleIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_rule_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_rule_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Rule
    # Updates the specified Bill Payment Rule by setting the values of the passed parameters. Any parameters not provided will be left unchanged.
    # @param id [String] 
    # @param billpay_rule_id_get_request [BillpayRuleIdGetRequest] The billpay_rule to update
    # @param [Hash] opts the optional parameters
    # @return [BillpayRuleIdGet200Response]
    def billpay_rule_id_patch(id, billpay_rule_id_get_request, opts = {})
      data, _status_code, _headers = billpay_rule_id_patch_with_http_info(id, billpay_rule_id_get_request, opts)
      data
    end

    # Update a Rule
    # Updates the specified Bill Payment Rule by setting the values of the passed parameters. Any parameters not provided will be left unchanged.
    # @param id [String] 
    # @param billpay_rule_id_get_request [BillpayRuleIdGetRequest] The billpay_rule to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillpayRuleIdGet200Response, Integer, Hash)>] BillpayRuleIdGet200Response data, response status code and response headers
    def billpay_rule_id_patch_with_http_info(id, billpay_rule_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_rule_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.billpay_rule_id_patch"
      end
      # verify the required parameter 'billpay_rule_id_get_request' is set
      if @api_client.config.client_side_validation && billpay_rule_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'billpay_rule_id_get_request' when calling DefaultApi.billpay_rule_id_patch"
      end
      # resource path
      local_var_path = '/billpay/rule/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billpay_rule_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BillpayRuleIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_rule_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_rule_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create billpay_rule
    # @param billpay_rule_get_request [BillpayRuleGetRequest] The billpay_rule to create
    # @param [Hash] opts the optional parameters
    # @return [BillpayRuleIdGet200Response]
    def billpay_rule_post(billpay_rule_get_request, opts = {})
      data, _status_code, _headers = billpay_rule_post_with_http_info(billpay_rule_get_request, opts)
      data
    end

    # create billpay_rule
    # @param billpay_rule_get_request [BillpayRuleGetRequest] The billpay_rule to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillpayRuleIdGet200Response, Integer, Hash)>] BillpayRuleIdGet200Response data, response status code and response headers
    def billpay_rule_post_with_http_info(billpay_rule_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.billpay_rule_post ...'
      end
      # verify the required parameter 'billpay_rule_get_request' is set
      if @api_client.config.client_side_validation && billpay_rule_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'billpay_rule_get_request' when calling DefaultApi.billpay_rule_post"
      end
      # resource path
      local_var_path = '/billpay/rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billpay_rule_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BillpayRuleIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.billpay_rule_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#billpay_rule_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index book
    # @param [Hash] opts the optional parameters
    # @return [Array<BookGet200ResponseInner>]
    def book_get(opts = {})
      data, _status_code, _headers = book_get_with_http_info(opts)
      data
    end

    # index book
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BookGet200ResponseInner>, Integer, Hash)>] Array<BookGet200ResponseInner> data, response status code and response headers
    def book_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.book_get ...'
      end
      # resource path
      local_var_path = '/book'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BookGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.book_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#book_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get book
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BookGet200ResponseInner]
    def book_id_get(id, opts = {})
      data, _status_code, _headers = book_id_get_with_http_info(id, opts)
      data
    end

    # get book
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookGet200ResponseInner, Integer, Hash)>] BookGet200ResponseInner data, response status code and response headers
    def book_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.book_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.book_id_get"
      end
      # resource path
      local_var_path = '/book/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BookGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.book_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#book_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update book
    # @param id [String] 
    # @param book_id_get_request [BookIdGetRequest] The book to update
    # @param [Hash] opts the optional parameters
    # @return [BookGet200ResponseInner]
    def book_id_patch(id, book_id_get_request, opts = {})
      data, _status_code, _headers = book_id_patch_with_http_info(id, book_id_get_request, opts)
      data
    end

    # update book
    # @param id [String] 
    # @param book_id_get_request [BookIdGetRequest] The book to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookGet200ResponseInner, Integer, Hash)>] BookGet200ResponseInner data, response status code and response headers
    def book_id_patch_with_http_info(id, book_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.book_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.book_id_patch"
      end
      # verify the required parameter 'book_id_get_request' is set
      if @api_client.config.client_side_validation && book_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'book_id_get_request' when calling DefaultApi.book_id_patch"
      end
      # resource path
      local_var_path = '/book/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(book_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BookGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.book_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#book_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create book
    # @param book_get_request [BookGetRequest] The book to create
    # @param [Hash] opts the optional parameters
    # @return [BookGet200ResponseInner]
    def book_post(book_get_request, opts = {})
      data, _status_code, _headers = book_post_with_http_info(book_get_request, opts)
      data
    end

    # create book
    # @param book_get_request [BookGetRequest] The book to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookGet200ResponseInner, Integer, Hash)>] BookGet200ResponseInner data, response status code and response headers
    def book_post_with_http_info(book_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.book_post ...'
      end
      # verify the required parameter 'book_get_request' is set
      if @api_client.config.client_side_validation && book_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'book_get_request' when calling DefaultApi.book_post"
      end
      # resource path
      local_var_path = '/book'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(book_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BookGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.book_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#book_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get business
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BusinessIdGet200Response]
    def business_id_get(id, opts = {})
      data, _status_code, _headers = business_id_get_with_http_info(id, opts)
      data
    end

    # get business
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BusinessIdGet200Response, Integer, Hash)>] BusinessIdGet200Response data, response status code and response headers
    def business_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.business_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.business_id_get"
      end
      # resource path
      local_var_path = '/business/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BusinessIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.business_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#business_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update business
    # @param id [String] 
    # @param business_id_get_request [BusinessIdGetRequest] The business to update
    # @param [Hash] opts the optional parameters
    # @return [BusinessIdGet200Response]
    def business_id_patch(id, business_id_get_request, opts = {})
      data, _status_code, _headers = business_id_patch_with_http_info(id, business_id_get_request, opts)
      data
    end

    # update business
    # @param id [String] 
    # @param business_id_get_request [BusinessIdGetRequest] The business to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(BusinessIdGet200Response, Integer, Hash)>] BusinessIdGet200Response data, response status code and response headers
    def business_id_patch_with_http_info(id, business_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.business_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.business_id_patch"
      end
      # verify the required parameter 'business_id_get_request' is set
      if @api_client.config.client_side_validation && business_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'business_id_get_request' when calling DefaultApi.business_id_patch"
      end
      # resource path
      local_var_path = '/business/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(business_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BusinessIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.business_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#business_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Card Auth Loop Endpoints
    # Returns a list of Card Auth Loop Endpoint objects, or an empty list if none are available.
    # @param [Hash] opts the optional parameters
    # @return [Array<CardAuthLoopEndpointGet200ResponseInner>]
    def card_auth_loop_endpoint_get(opts = {})
      data, _status_code, _headers = card_auth_loop_endpoint_get_with_http_info(opts)
      data
    end

    # List Card Auth Loop Endpoints
    # Returns a list of Card Auth Loop Endpoint objects, or an empty list if none are available.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CardAuthLoopEndpointGet200ResponseInner>, Integer, Hash)>] Array<CardAuthLoopEndpointGet200ResponseInner> data, response status code and response headers
    def card_auth_loop_endpoint_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_auth_loop_endpoint_get ...'
      end
      # resource path
      local_var_path = '/card_auth_loop_endpoint'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CardAuthLoopEndpointGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_auth_loop_endpoint_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_auth_loop_endpoint_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete card_auth_loop_endpoint
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def card_auth_loop_endpoint_id_delete(id, opts = {})
      card_auth_loop_endpoint_id_delete_with_http_info(id, opts)
      nil
    end

    # delete card_auth_loop_endpoint
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def card_auth_loop_endpoint_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_auth_loop_endpoint_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.card_auth_loop_endpoint_id_delete"
      end
      # resource path
      local_var_path = '/card_auth_loop_endpoint/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_auth_loop_endpoint_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_auth_loop_endpoint_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get card_auth_loop_endpoint
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CardAuthLoopEndpointGet200ResponseInner]
    def card_auth_loop_endpoint_id_get(id, opts = {})
      data, _status_code, _headers = card_auth_loop_endpoint_id_get_with_http_info(id, opts)
      data
    end

    # get card_auth_loop_endpoint
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardAuthLoopEndpointGet200ResponseInner, Integer, Hash)>] CardAuthLoopEndpointGet200ResponseInner data, response status code and response headers
    def card_auth_loop_endpoint_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_auth_loop_endpoint_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.card_auth_loop_endpoint_id_get"
      end
      # resource path
      local_var_path = '/card_auth_loop_endpoint/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardAuthLoopEndpointGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_auth_loop_endpoint_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_auth_loop_endpoint_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update card_auth_loop_endpoint
    # @param id [String] 
    # @param card_auth_loop_endpoint_id_delete_request [CardAuthLoopEndpointIdDeleteRequest] The card_auth_loop_endpoint to update
    # @param [Hash] opts the optional parameters
    # @return [CardAuthLoopEndpointGet200ResponseInner]
    def card_auth_loop_endpoint_id_patch(id, card_auth_loop_endpoint_id_delete_request, opts = {})
      data, _status_code, _headers = card_auth_loop_endpoint_id_patch_with_http_info(id, card_auth_loop_endpoint_id_delete_request, opts)
      data
    end

    # update card_auth_loop_endpoint
    # @param id [String] 
    # @param card_auth_loop_endpoint_id_delete_request [CardAuthLoopEndpointIdDeleteRequest] The card_auth_loop_endpoint to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardAuthLoopEndpointGet200ResponseInner, Integer, Hash)>] CardAuthLoopEndpointGet200ResponseInner data, response status code and response headers
    def card_auth_loop_endpoint_id_patch_with_http_info(id, card_auth_loop_endpoint_id_delete_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_auth_loop_endpoint_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.card_auth_loop_endpoint_id_patch"
      end
      # verify the required parameter 'card_auth_loop_endpoint_id_delete_request' is set
      if @api_client.config.client_side_validation && card_auth_loop_endpoint_id_delete_request.nil?
        fail ArgumentError, "Missing the required parameter 'card_auth_loop_endpoint_id_delete_request' when calling DefaultApi.card_auth_loop_endpoint_id_patch"
      end
      # resource path
      local_var_path = '/card_auth_loop_endpoint/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(card_auth_loop_endpoint_id_delete_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardAuthLoopEndpointGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_auth_loop_endpoint_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_auth_loop_endpoint_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create card_auth_loop_endpoint
    # @param card_auth_loop_endpoint_get_request [CardAuthLoopEndpointGetRequest] The card_auth_loop_endpoint to create
    # @param [Hash] opts the optional parameters
    # @return [CardAuthLoopEndpointGet200ResponseInner]
    def card_auth_loop_endpoint_post(card_auth_loop_endpoint_get_request, opts = {})
      data, _status_code, _headers = card_auth_loop_endpoint_post_with_http_info(card_auth_loop_endpoint_get_request, opts)
      data
    end

    # create card_auth_loop_endpoint
    # @param card_auth_loop_endpoint_get_request [CardAuthLoopEndpointGetRequest] The card_auth_loop_endpoint to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardAuthLoopEndpointGet200ResponseInner, Integer, Hash)>] CardAuthLoopEndpointGet200ResponseInner data, response status code and response headers
    def card_auth_loop_endpoint_post_with_http_info(card_auth_loop_endpoint_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_auth_loop_endpoint_post ...'
      end
      # verify the required parameter 'card_auth_loop_endpoint_get_request' is set
      if @api_client.config.client_side_validation && card_auth_loop_endpoint_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'card_auth_loop_endpoint_get_request' when calling DefaultApi.card_auth_loop_endpoint_post"
      end
      # resource path
      local_var_path = '/card_auth_loop_endpoint'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(card_auth_loop_endpoint_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardAuthLoopEndpointGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_auth_loop_endpoint_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_auth_loop_endpoint_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create google-pay-token-request
    # @param card_id [String] 
    # @param card_card_id_digital_wallet_token_google_pay_post_request [CardCardIdDigitalWalletTokenGooglePayPostRequest] The google-pay-token-request to create
    # @param [Hash] opts the optional parameters
    # @return [CardCardIdDigitalWalletTokenGooglePayPost200Response]
    def card_card_id_digital_wallet_token_google_pay_post(card_id, card_card_id_digital_wallet_token_google_pay_post_request, opts = {})
      data, _status_code, _headers = card_card_id_digital_wallet_token_google_pay_post_with_http_info(card_id, card_card_id_digital_wallet_token_google_pay_post_request, opts)
      data
    end

    # create google-pay-token-request
    # @param card_id [String] 
    # @param card_card_id_digital_wallet_token_google_pay_post_request [CardCardIdDigitalWalletTokenGooglePayPostRequest] The google-pay-token-request to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardCardIdDigitalWalletTokenGooglePayPost200Response, Integer, Hash)>] CardCardIdDigitalWalletTokenGooglePayPost200Response data, response status code and response headers
    def card_card_id_digital_wallet_token_google_pay_post_with_http_info(card_id, card_card_id_digital_wallet_token_google_pay_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_card_id_digital_wallet_token_google_pay_post ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling DefaultApi.card_card_id_digital_wallet_token_google_pay_post"
      end
      # verify the required parameter 'card_card_id_digital_wallet_token_google_pay_post_request' is set
      if @api_client.config.client_side_validation && card_card_id_digital_wallet_token_google_pay_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'card_card_id_digital_wallet_token_google_pay_post_request' when calling DefaultApi.card_card_id_digital_wallet_token_google_pay_post"
      end
      # resource path
      local_var_path = '/card/{card_id}/digital_wallet_token/google_pay'.sub('{' + 'card_id' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(card_card_id_digital_wallet_token_google_pay_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardCardIdDigitalWalletTokenGooglePayPost200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_card_id_digital_wallet_token_google_pay_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_card_id_digital_wallet_token_google_pay_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index card.charge
    # @param [Hash] opts the optional parameters
    # @return [Array<CardChargeIdGet200Response>]
    def card_charge_get(opts = {})
      data, _status_code, _headers = card_charge_get_with_http_info(opts)
      data
    end

    # index card.charge
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CardChargeIdGet200Response>, Integer, Hash)>] Array<CardChargeIdGet200Response> data, response status code and response headers
    def card_charge_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_charge_get ...'
      end
      # resource path
      local_var_path = '/card/charge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CardChargeIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_charge_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_charge_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get card.charge
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CardChargeIdGet200Response]
    def card_charge_id_get(id, opts = {})
      data, _status_code, _headers = card_charge_id_get_with_http_info(id, opts)
      data
    end

    # get card.charge
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardChargeIdGet200Response, Integer, Hash)>] CardChargeIdGet200Response data, response status code and response headers
    def card_charge_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_charge_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.card_charge_id_get"
      end
      # resource path
      local_var_path = '/card/charge/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardChargeIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_charge_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_charge_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create card.charge
    # @param card_charge_get_request [CardChargeGetRequest] The card.charge to create
    # @param [Hash] opts the optional parameters
    # @return [CardChargeIdGet200Response]
    def card_charge_post(card_charge_get_request, opts = {})
      data, _status_code, _headers = card_charge_post_with_http_info(card_charge_get_request, opts)
      data
    end

    # create card.charge
    # @param card_charge_get_request [CardChargeGetRequest] The card.charge to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardChargeIdGet200Response, Integer, Hash)>] CardChargeIdGet200Response data, response status code and response headers
    def card_charge_post_with_http_info(card_charge_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_charge_post ...'
      end
      # verify the required parameter 'card_charge_get_request' is set
      if @api_client.config.client_side_validation && card_charge_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'card_charge_get_request' when calling DefaultApi.card_charge_post"
      end
      # resource path
      local_var_path = '/card/charge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(card_charge_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardChargeIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_charge_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_charge_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Card Events
    # Returns a list of card event objects, filterable by card_id, or an empty list if none are available.
    # @param [Hash] opts the optional parameters
    # @return [Array<CardEventIdGet200Response>]
    def card_event_get(opts = {})
      data, _status_code, _headers = card_event_get_with_http_info(opts)
      data
    end

    # List Card Events
    # Returns a list of card event objects, filterable by card_id, or an empty list if none are available.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CardEventIdGet200Response>, Integer, Hash)>] Array<CardEventIdGet200Response> data, response status code and response headers
    def card_event_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_event_get ...'
      end
      # resource path
      local_var_path = '/card_event'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CardEventIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_event_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_event_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Card Event
    # Retrieves the details of an existing card event. Pass a unique ID from the Card Event list.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CardEventIdGet200Response]
    def card_event_id_get(id, opts = {})
      data, _status_code, _headers = card_event_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a Card Event
    # Retrieves the details of an existing card event. Pass a unique ID from the Card Event list.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardEventIdGet200Response, Integer, Hash)>] CardEventIdGet200Response data, response status code and response headers
    def card_event_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_event_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.card_event_id_get"
      end
      # resource path
      local_var_path = '/card_event/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardEventIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_event_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_event_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index card
    # @param [Hash] opts the optional parameters
    # @return [Array<CardGet200ResponseInner>]
    def card_get(opts = {})
      data, _status_code, _headers = card_get_with_http_info(opts)
      data
    end

    # index card
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CardGet200ResponseInner>, Integer, Hash)>] Array<CardGet200ResponseInner> data, response status code and response headers
    def card_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_get ...'
      end
      # resource path
      local_var_path = '/card'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CardGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get card
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CardGet200ResponseInner]
    def card_id_get(id, opts = {})
      data, _status_code, _headers = card_id_get_with_http_info(id, opts)
      data
    end

    # get card
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardGet200ResponseInner, Integer, Hash)>] CardGet200ResponseInner data, response status code and response headers
    def card_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.card_id_get"
      end
      # resource path
      local_var_path = '/card/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update card
    # @param id [String] 
    # @param card_id_get_request [CardIdGetRequest] The card to update
    # @param [Hash] opts the optional parameters
    # @return [CardGet200ResponseInner]
    def card_id_patch(id, card_id_get_request, opts = {})
      data, _status_code, _headers = card_id_patch_with_http_info(id, card_id_get_request, opts)
      data
    end

    # update card
    # @param id [String] 
    # @param card_id_get_request [CardIdGetRequest] The card to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardGet200ResponseInner, Integer, Hash)>] CardGet200ResponseInner data, response status code and response headers
    def card_id_patch_with_http_info(id, card_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.card_id_patch"
      end
      # verify the required parameter 'card_id_get_request' is set
      if @api_client.config.client_side_validation && card_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'card_id_get_request' when calling DefaultApi.card_id_patch"
      end
      # resource path
      local_var_path = '/card/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(card_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get token
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CardIdTokenGet200Response]
    def card_id_token_get(id, opts = {})
      data, _status_code, _headers = card_id_token_get_with_http_info(id, opts)
      data
    end

    # get token
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardIdTokenGet200Response, Integer, Hash)>] CardIdTokenGet200Response data, response status code and response headers
    def card_id_token_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_id_token_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.card_id_token_get"
      end
      # resource path
      local_var_path = '/card/{id}/token'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardIdTokenGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_id_token_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_id_token_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create card
    # @param card_get_request [CardGetRequest] The card to create
    # @param [Hash] opts the optional parameters
    # @return [CardGet200ResponseInner]
    def card_post(card_get_request, opts = {})
      data, _status_code, _headers = card_post_with_http_info(card_get_request, opts)
      data
    end

    # create card
    # @param card_get_request [CardGetRequest] The card to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardGet200ResponseInner, Integer, Hash)>] CardGet200ResponseInner data, response status code and response headers
    def card_post_with_http_info(card_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.card_post ...'
      end
      # verify the required parameter 'card_get_request' is set
      if @api_client.config.client_side_validation && card_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'card_get_request' when calling DefaultApi.card_post"
      end
      # resource path
      local_var_path = '/card'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(card_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.card_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#card_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index cardproduct
    # @param [Hash] opts the optional parameters
    # @return [Array<CardproductIdGet200Response>]
    def cardproduct_get(opts = {})
      data, _status_code, _headers = cardproduct_get_with_http_info(opts)
      data
    end

    # index cardproduct
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CardproductIdGet200Response>, Integer, Hash)>] Array<CardproductIdGet200Response> data, response status code and response headers
    def cardproduct_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.cardproduct_get ...'
      end
      # resource path
      local_var_path = '/cardproduct'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CardproductIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.cardproduct_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#cardproduct_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Card Product
    # The Card Product resource represents the program settings, customizations, and behavior of the cards you're issuing. In general, these resources will be configured by Treasury Prime when you set up your card program. This resource is exposed in the API for your reference.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CardproductIdGet200Response]
    def cardproduct_id_get(id, opts = {})
      data, _status_code, _headers = cardproduct_id_get_with_http_info(id, opts)
      data
    end

    # Card Product
    # The Card Product resource represents the program settings, customizations, and behavior of the cards you&#39;re issuing. In general, these resources will be configured by Treasury Prime when you set up your card program. This resource is exposed in the API for your reference.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardproductIdGet200Response, Integer, Hash)>] CardproductIdGet200Response data, response status code and response headers
    def cardproduct_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.cardproduct_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.cardproduct_id_get"
      end
      # resource path
      local_var_path = '/cardproduct/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardproductIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.cardproduct_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#cardproduct_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update cardproduct
    # @param id [String] 
    # @param cardproduct_id_get_request [CardproductIdGetRequest] The cardproduct to update
    # @param [Hash] opts the optional parameters
    # @return [CardproductIdGet200Response]
    def cardproduct_id_patch(id, cardproduct_id_get_request, opts = {})
      data, _status_code, _headers = cardproduct_id_patch_with_http_info(id, cardproduct_id_get_request, opts)
      data
    end

    # update cardproduct
    # @param id [String] 
    # @param cardproduct_id_get_request [CardproductIdGetRequest] The cardproduct to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardproductIdGet200Response, Integer, Hash)>] CardproductIdGet200Response data, response status code and response headers
    def cardproduct_id_patch_with_http_info(id, cardproduct_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.cardproduct_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.cardproduct_id_patch"
      end
      # verify the required parameter 'cardproduct_id_get_request' is set
      if @api_client.config.client_side_validation && cardproduct_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'cardproduct_id_get_request' when calling DefaultApi.cardproduct_id_patch"
      end
      # resource path
      local_var_path = '/cardproduct/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cardproduct_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CardproductIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.cardproduct_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#cardproduct_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index check_deposit
    # @param [Hash] opts the optional parameters
    # @return [Array<CheckDepositGet200ResponseInner>]
    def check_deposit_get(opts = {})
      data, _status_code, _headers = check_deposit_get_with_http_info(opts)
      data
    end

    # index check_deposit
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CheckDepositGet200ResponseInner>, Integer, Hash)>] Array<CheckDepositGet200ResponseInner> data, response status code and response headers
    def check_deposit_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_deposit_get ...'
      end
      # resource path
      local_var_path = '/check_deposit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CheckDepositGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.check_deposit_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_deposit_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get check_deposit
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CheckDepositGet200ResponseInner]
    def check_deposit_id_get(id, opts = {})
      data, _status_code, _headers = check_deposit_id_get_with_http_info(id, opts)
      data
    end

    # get check_deposit
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckDepositGet200ResponseInner, Integer, Hash)>] CheckDepositGet200ResponseInner data, response status code and response headers
    def check_deposit_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_deposit_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.check_deposit_id_get"
      end
      # resource path
      local_var_path = '/check_deposit/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckDepositGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.check_deposit_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_deposit_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index check_deposit_person
    # @param [Hash] opts the optional parameters
    # @return [Array<CheckDepositPersonIdGet200Response>]
    def check_deposit_person_get(opts = {})
      data, _status_code, _headers = check_deposit_person_get_with_http_info(opts)
      data
    end

    # index check_deposit_person
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CheckDepositPersonIdGet200Response>, Integer, Hash)>] Array<CheckDepositPersonIdGet200Response> data, response status code and response headers
    def check_deposit_person_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_deposit_person_get ...'
      end
      # resource path
      local_var_path = '/check_deposit_person'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CheckDepositPersonIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.check_deposit_person_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_deposit_person_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get check_deposit_person
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CheckDepositPersonIdGet200Response]
    def check_deposit_person_id_get(id, opts = {})
      data, _status_code, _headers = check_deposit_person_id_get_with_http_info(id, opts)
      data
    end

    # get check_deposit_person
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckDepositPersonIdGet200Response, Integer, Hash)>] CheckDepositPersonIdGet200Response data, response status code and response headers
    def check_deposit_person_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_deposit_person_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.check_deposit_person_id_get"
      end
      # resource path
      local_var_path = '/check_deposit_person/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckDepositPersonIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.check_deposit_person_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_deposit_person_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create check_deposit_person
    # @param check_deposit_person_get_request [CheckDepositPersonGetRequest] The check_deposit_person to create
    # @param [Hash] opts the optional parameters
    # @return [CheckDepositPersonIdGet200Response]
    def check_deposit_person_post(check_deposit_person_get_request, opts = {})
      data, _status_code, _headers = check_deposit_person_post_with_http_info(check_deposit_person_get_request, opts)
      data
    end

    # create check_deposit_person
    # @param check_deposit_person_get_request [CheckDepositPersonGetRequest] The check_deposit_person to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckDepositPersonIdGet200Response, Integer, Hash)>] CheckDepositPersonIdGet200Response data, response status code and response headers
    def check_deposit_person_post_with_http_info(check_deposit_person_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_deposit_person_post ...'
      end
      # verify the required parameter 'check_deposit_person_get_request' is set
      if @api_client.config.client_side_validation && check_deposit_person_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'check_deposit_person_get_request' when calling DefaultApi.check_deposit_person_post"
      end
      # resource path
      local_var_path = '/check_deposit_person'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(check_deposit_person_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckDepositPersonIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.check_deposit_person_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_deposit_person_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create check_deposit
    # @param check_deposit_get_request [CheckDepositGetRequest] The check_deposit to create
    # @param [Hash] opts the optional parameters
    # @return [CheckDepositGet200ResponseInner]
    def check_deposit_post(check_deposit_get_request, opts = {})
      data, _status_code, _headers = check_deposit_post_with_http_info(check_deposit_get_request, opts)
      data
    end

    # create check_deposit
    # @param check_deposit_get_request [CheckDepositGetRequest] The check_deposit to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckDepositGet200ResponseInner, Integer, Hash)>] CheckDepositGet200ResponseInner data, response status code and response headers
    def check_deposit_post_with_http_info(check_deposit_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_deposit_post ...'
      end
      # verify the required parameter 'check_deposit_get_request' is set
      if @api_client.config.client_side_validation && check_deposit_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'check_deposit_get_request' when calling DefaultApi.check_deposit_post"
      end
      # resource path
      local_var_path = '/check_deposit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(check_deposit_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckDepositGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.check_deposit_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_deposit_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index check
    # @param [Hash] opts the optional parameters
    # @return [Array<CheckGet200ResponseInner>]
    def check_get(opts = {})
      data, _status_code, _headers = check_get_with_http_info(opts)
      data
    end

    # index check
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CheckGet200ResponseInner>, Integer, Hash)>] Array<CheckGet200ResponseInner> data, response status code and response headers
    def check_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_get ...'
      end
      # resource path
      local_var_path = '/check'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CheckGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.check_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get check
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CheckGet200ResponseInner]
    def check_id_get(id, opts = {})
      data, _status_code, _headers = check_id_get_with_http_info(id, opts)
      data
    end

    # get check
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckGet200ResponseInner, Integer, Hash)>] CheckGet200ResponseInner data, response status code and response headers
    def check_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.check_id_get"
      end
      # resource path
      local_var_path = '/check/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.check_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index check_image
    # @param [Hash] opts the optional parameters
    # @return [Array<CheckImageGet200ResponseInner>]
    def check_image_get(opts = {})
      data, _status_code, _headers = check_image_get_with_http_info(opts)
      data
    end

    # index check_image
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CheckImageGet200ResponseInner>, Integer, Hash)>] Array<CheckImageGet200ResponseInner> data, response status code and response headers
    def check_image_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_image_get ...'
      end
      # resource path
      local_var_path = '/check_image'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CheckImageGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.check_image_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_image_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get check_image
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CheckImageGet200ResponseInner]
    def check_image_id_get(id, opts = {})
      data, _status_code, _headers = check_image_id_get_with_http_info(id, opts)
      data
    end

    # get check_image
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckImageGet200ResponseInner, Integer, Hash)>] CheckImageGet200ResponseInner data, response status code and response headers
    def check_image_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_image_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.check_image_id_get"
      end
      # resource path
      local_var_path = '/check_image/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckImageGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.check_image_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_image_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create check
    # @param check_get_request [CheckGetRequest] The check to create
    # @param [Hash] opts the optional parameters
    # @return [CheckGet200ResponseInner]
    def check_post(check_get_request, opts = {})
      data, _status_code, _headers = check_post_with_http_info(check_get_request, opts)
      data
    end

    # create check
    # @param check_get_request [CheckGetRequest] The check to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckGet200ResponseInner, Integer, Hash)>] CheckGet200ResponseInner data, response status code and response headers
    def check_post_with_http_info(check_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_post ...'
      end
      # verify the required parameter 'check_get_request' is set
      if @api_client.config.client_side_validation && check_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'check_get_request' when calling DefaultApi.check_post"
      end
      # resource path
      local_var_path = '/check'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(check_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.check_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index counterparty
    # @param [Hash] opts the optional parameters
    # @return [Array<CounterpartyIdGet200Response>]
    def counterparty_get(opts = {})
      data, _status_code, _headers = counterparty_get_with_http_info(opts)
      data
    end

    # index counterparty
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CounterpartyIdGet200Response>, Integer, Hash)>] Array<CounterpartyIdGet200Response> data, response status code and response headers
    def counterparty_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.counterparty_get ...'
      end
      # resource path
      local_var_path = '/counterparty'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CounterpartyIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.counterparty_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#counterparty_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get counterparty
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CounterpartyIdGet200Response]
    def counterparty_id_get(id, opts = {})
      data, _status_code, _headers = counterparty_id_get_with_http_info(id, opts)
      data
    end

    # get counterparty
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CounterpartyIdGet200Response, Integer, Hash)>] CounterpartyIdGet200Response data, response status code and response headers
    def counterparty_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.counterparty_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.counterparty_id_get"
      end
      # resource path
      local_var_path = '/counterparty/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CounterpartyIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.counterparty_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#counterparty_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update counterparty
    # @param id [String] 
    # @param counterparty_id_get_request [CounterpartyIdGetRequest] The counterparty to update
    # @param [Hash] opts the optional parameters
    # @return [CounterpartyIdGet200Response]
    def counterparty_id_patch(id, counterparty_id_get_request, opts = {})
      data, _status_code, _headers = counterparty_id_patch_with_http_info(id, counterparty_id_get_request, opts)
      data
    end

    # update counterparty
    # @param id [String] 
    # @param counterparty_id_get_request [CounterpartyIdGetRequest] The counterparty to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(CounterpartyIdGet200Response, Integer, Hash)>] CounterpartyIdGet200Response data, response status code and response headers
    def counterparty_id_patch_with_http_info(id, counterparty_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.counterparty_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.counterparty_id_patch"
      end
      # verify the required parameter 'counterparty_id_get_request' is set
      if @api_client.config.client_side_validation && counterparty_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'counterparty_id_get_request' when calling DefaultApi.counterparty_id_patch"
      end
      # resource path
      local_var_path = '/counterparty/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(counterparty_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CounterpartyIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.counterparty_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#counterparty_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create counterparty
    # @param counterparty_get_request [CounterpartyGetRequest] The counterparty to create
    # @param [Hash] opts the optional parameters
    # @return [CounterpartyIdGet200Response]
    def counterparty_post(counterparty_get_request, opts = {})
      data, _status_code, _headers = counterparty_post_with_http_info(counterparty_get_request, opts)
      data
    end

    # create counterparty
    # @param counterparty_get_request [CounterpartyGetRequest] The counterparty to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(CounterpartyIdGet200Response, Integer, Hash)>] CounterpartyIdGet200Response data, response status code and response headers
    def counterparty_post_with_http_info(counterparty_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.counterparty_post ...'
      end
      # verify the required parameter 'counterparty_get_request' is set
      if @api_client.config.client_side_validation && counterparty_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'counterparty_get_request' when calling DefaultApi.counterparty_post"
      end
      # resource path
      local_var_path = '/counterparty'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(counterparty_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CounterpartyIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.counterparty_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#counterparty_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index document
    # @param [Hash] opts the optional parameters
    # @return [Array<DocumentGet200ResponseInner>]
    def document_get(opts = {})
      data, _status_code, _headers = document_get_with_http_info(opts)
      data
    end

    # index document
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DocumentGet200ResponseInner>, Integer, Hash)>] Array<DocumentGet200ResponseInner> data, response status code and response headers
    def document_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.document_get ...'
      end
      # resource path
      local_var_path = '/document'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DocumentGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.document_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#document_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get document
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DocumentGet200ResponseInner]
    def document_id_get(id, opts = {})
      data, _status_code, _headers = document_id_get_with_http_info(id, opts)
      data
    end

    # get document
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentGet200ResponseInner, Integer, Hash)>] DocumentGet200ResponseInner data, response status code and response headers
    def document_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.document_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.document_id_get"
      end
      # resource path
      local_var_path = '/document/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.document_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#document_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update document
    # @param id [String] 
    # @param document_id_get_request [DocumentIdGetRequest] The document to update
    # @param [Hash] opts the optional parameters
    # @return [DocumentGet200ResponseInner]
    def document_id_patch(id, document_id_get_request, opts = {})
      data, _status_code, _headers = document_id_patch_with_http_info(id, document_id_get_request, opts)
      data
    end

    # update document
    # @param id [String] 
    # @param document_id_get_request [DocumentIdGetRequest] The document to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentGet200ResponseInner, Integer, Hash)>] DocumentGet200ResponseInner data, response status code and response headers
    def document_id_patch_with_http_info(id, document_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.document_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.document_id_patch"
      end
      # verify the required parameter 'document_id_get_request' is set
      if @api_client.config.client_side_validation && document_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'document_id_get_request' when calling DefaultApi.document_id_patch"
      end
      # resource path
      local_var_path = '/document/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(document_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.document_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#document_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create document
    # @param document_get_request [DocumentGetRequest] The document to create
    # @param [Hash] opts the optional parameters
    # @return [DocumentGet200ResponseInner]
    def document_post(document_get_request, opts = {})
      data, _status_code, _headers = document_post_with_http_info(document_get_request, opts)
      data
    end

    # create document
    # @param document_get_request [DocumentGetRequest] The document to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentGet200ResponseInner, Integer, Hash)>] DocumentGet200ResponseInner data, response status code and response headers
    def document_post_with_http_info(document_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.document_post ...'
      end
      # verify the required parameter 'document_get_request' is set
      if @api_client.config.client_side_validation && document_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'document_get_request' when calling DefaultApi.document_post"
      end
      # resource path
      local_var_path = '/document'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(document_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.document_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#document_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get file
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [FileIdContentGet200Response]
    def file_id_content_get(id, opts = {})
      data, _status_code, _headers = file_id_content_get_with_http_info(id, opts)
      data
    end

    # get file
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FileIdContentGet200Response, Integer, Hash)>] FileIdContentGet200Response data, response status code and response headers
    def file_id_content_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.file_id_content_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.file_id_content_get"
      end
      # resource path
      local_var_path = '/file/{id}/content'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FileIdContentGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.file_id_content_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#file_id_content_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get file
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [FileIdContentGet200Response]
    def file_id_get(id, opts = {})
      data, _status_code, _headers = file_id_get_with_http_info(id, opts)
      data
    end

    # get file
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FileIdContentGet200Response, Integer, Hash)>] FileIdContentGet200Response data, response status code and response headers
    def file_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.file_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.file_id_get"
      end
      # resource path
      local_var_path = '/file/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FileIdContentGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.file_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#file_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get person.card.index
    # @param id [String] 
    # @param card_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonIdCardGet200Response]
    def person_id_card_card_id_get(id, card_id, opts = {})
      data, _status_code, _headers = person_id_card_card_id_get_with_http_info(id, card_id, opts)
      data
    end

    # get person.card.index
    # @param id [String] 
    # @param card_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonIdCardGet200Response, Integer, Hash)>] PersonIdCardGet200Response data, response status code and response headers
    def person_id_card_card_id_get_with_http_info(id, card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.person_id_card_card_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.person_id_card_card_id_get"
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling DefaultApi.person_id_card_card_id_get"
      end
      # resource path
      local_var_path = '/person/{id}/card/{card_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'card_id' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonIdCardGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.person_id_card_card_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_id_card_card_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get person.card.index
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonIdCardGet200Response]
    def person_id_card_get(id, opts = {})
      data, _status_code, _headers = person_id_card_get_with_http_info(id, opts)
      data
    end

    # get person.card.index
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonIdCardGet200Response, Integer, Hash)>] PersonIdCardGet200Response data, response status code and response headers
    def person_id_card_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.person_id_card_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.person_id_card_get"
      end
      # resource path
      local_var_path = '/person/{id}/card'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonIdCardGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.person_id_card_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_id_card_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update person.card.in
    # @param id [String] 
    # @param person_id_card_get_request [PersonIdCardGetRequest] The person.card.in to update
    # @param [Hash] opts the optional parameters
    # @return [PersonIdCardGet200Response1]
    def person_id_card_post(id, person_id_card_get_request, opts = {})
      data, _status_code, _headers = person_id_card_post_with_http_info(id, person_id_card_get_request, opts)
      data
    end

    # update person.card.in
    # @param id [String] 
    # @param person_id_card_get_request [PersonIdCardGetRequest] The person.card.in to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonIdCardGet200Response1, Integer, Hash)>] PersonIdCardGet200Response1 data, response status code and response headers
    def person_id_card_post_with_http_info(id, person_id_card_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.person_id_card_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.person_id_card_post"
      end
      # verify the required parameter 'person_id_card_get_request' is set
      if @api_client.config.client_side_validation && person_id_card_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'person_id_card_get_request' when calling DefaultApi.person_id_card_post"
      end
      # resource path
      local_var_path = '/person/{id}/card'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(person_id_card_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PersonIdCardGet200Response1'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.person_id_card_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_id_card_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get person
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonIdGet200Response]
    def person_id_get(id, opts = {})
      data, _status_code, _headers = person_id_get_with_http_info(id, opts)
      data
    end

    # get person
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonIdGet200Response, Integer, Hash)>] PersonIdGet200Response data, response status code and response headers
    def person_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.person_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.person_id_get"
      end
      # resource path
      local_var_path = '/person/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.person_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update person
    # @param id [String] 
    # @param person_id_get_request [PersonIdGetRequest] The person to update
    # @param [Hash] opts the optional parameters
    # @return [PersonIdGet200Response]
    def person_id_patch(id, person_id_get_request, opts = {})
      data, _status_code, _headers = person_id_patch_with_http_info(id, person_id_get_request, opts)
      data
    end

    # update person
    # @param id [String] 
    # @param person_id_get_request [PersonIdGetRequest] The person to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonIdGet200Response, Integer, Hash)>] PersonIdGet200Response data, response status code and response headers
    def person_id_patch_with_http_info(id, person_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.person_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.person_id_patch"
      end
      # verify the required parameter 'person_id_get_request' is set
      if @api_client.config.client_side_validation && person_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'person_id_get_request' when calling DefaultApi.person_id_patch"
      end
      # resource path
      local_var_path = '/person/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(person_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PersonIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.person_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get plaid-exchange.auth
    # @param [Hash] opts the optional parameters
    # @return [PlaidExchangeUsersAuthTokenPost200Response]
    def plaid_exchange_users_auth_token_post(opts = {})
      data, _status_code, _headers = plaid_exchange_users_auth_token_post_with_http_info(opts)
      data
    end

    # get plaid-exchange.auth
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlaidExchangeUsersAuthTokenPost200Response, Integer, Hash)>] PlaidExchangeUsersAuthTokenPost200Response data, response status code and response headers
    def plaid_exchange_users_auth_token_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.plaid_exchange_users_auth_token_post ...'
      end
      # resource path
      local_var_path = '/plaid_exchange/users/auth_token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlaidExchangeUsersAuthTokenPost200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.plaid_exchange_users_auth_token_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#plaid_exchange_users_auth_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get plaid-exchange.2fa
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PlaidExchangeUsersUserId2faPost200Response]
    def plaid_exchange_users_user_id2fa_post(user_id, opts = {})
      data, _status_code, _headers = plaid_exchange_users_user_id2fa_post_with_http_info(user_id, opts)
      data
    end

    # get plaid-exchange.2fa
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlaidExchangeUsersUserId2faPost200Response, Integer, Hash)>] PlaidExchangeUsersUserId2faPost200Response data, response status code and response headers
    def plaid_exchange_users_user_id2fa_post_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.plaid_exchange_users_user_id2fa_post ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.plaid_exchange_users_user_id2fa_post"
      end
      # resource path
      local_var_path = '/plaid_exchange/users/{user_id}/2fa'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlaidExchangeUsersUserId2faPost200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.plaid_exchange_users_user_id2fa_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#plaid_exchange_users_user_id2fa_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get plaid-exchange.identity
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PlaidExchangeUsersUserIdGet200Response]
    def plaid_exchange_users_user_id_get(user_id, opts = {})
      data, _status_code, _headers = plaid_exchange_users_user_id_get_with_http_info(user_id, opts)
      data
    end

    # get plaid-exchange.identity
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlaidExchangeUsersUserIdGet200Response, Integer, Hash)>] PlaidExchangeUsersUserIdGet200Response data, response status code and response headers
    def plaid_exchange_users_user_id_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.plaid_exchange_users_user_id_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.plaid_exchange_users_user_id_get"
      end
      # resource path
      local_var_path = '/plaid_exchange/users/{user_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlaidExchangeUsersUserIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.plaid_exchange_users_user_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#plaid_exchange_users_user_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get plaid-exchange.transactions
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PlaidExchangeUsersUserIdTransactionsGet200Response]
    def plaid_exchange_users_user_id_transactions_get(user_id, opts = {})
      data, _status_code, _headers = plaid_exchange_users_user_id_transactions_get_with_http_info(user_id, opts)
      data
    end

    # get plaid-exchange.transactions
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlaidExchangeUsersUserIdTransactionsGet200Response, Integer, Hash)>] PlaidExchangeUsersUserIdTransactionsGet200Response data, response status code and response headers
    def plaid_exchange_users_user_id_transactions_get_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.plaid_exchange_users_user_id_transactions_get ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.plaid_exchange_users_user_id_transactions_get"
      end
      # resource path
      local_var_path = '/plaid_exchange/users/{user_id}/transactions'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlaidExchangeUsersUserIdTransactionsGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.plaid_exchange_users_user_id_transactions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#plaid_exchange_users_user_id_transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index reserve
    # @param [Hash] opts the optional parameters
    # @return [Array<ReserveGet200ResponseInner>]
    def reserve_get(opts = {})
      data, _status_code, _headers = reserve_get_with_http_info(opts)
      data
    end

    # index reserve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ReserveGet200ResponseInner>, Integer, Hash)>] Array<ReserveGet200ResponseInner> data, response status code and response headers
    def reserve_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reserve_get ...'
      end
      # resource path
      local_var_path = '/reserve'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ReserveGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.reserve_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reserve_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete reserve
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reserve_id_delete(id, opts = {})
      reserve_id_delete_with_http_info(id, opts)
      nil
    end

    # delete reserve
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reserve_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reserve_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.reserve_id_delete"
      end
      # resource path
      local_var_path = '/reserve/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.reserve_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reserve_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get reserve
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ReserveGet200ResponseInner]
    def reserve_id_get(id, opts = {})
      data, _status_code, _headers = reserve_id_get_with_http_info(id, opts)
      data
    end

    # get reserve
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReserveGet200ResponseInner, Integer, Hash)>] ReserveGet200ResponseInner data, response status code and response headers
    def reserve_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reserve_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.reserve_id_get"
      end
      # resource path
      local_var_path = '/reserve/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReserveGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.reserve_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reserve_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update reserve
    # @param id [String] 
    # @param reserve_id_delete_request [ReserveIdDeleteRequest] The reserve to update
    # @param [Hash] opts the optional parameters
    # @return [ReserveGet200ResponseInner]
    def reserve_id_patch(id, reserve_id_delete_request, opts = {})
      data, _status_code, _headers = reserve_id_patch_with_http_info(id, reserve_id_delete_request, opts)
      data
    end

    # update reserve
    # @param id [String] 
    # @param reserve_id_delete_request [ReserveIdDeleteRequest] The reserve to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReserveGet200ResponseInner, Integer, Hash)>] ReserveGet200ResponseInner data, response status code and response headers
    def reserve_id_patch_with_http_info(id, reserve_id_delete_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reserve_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.reserve_id_patch"
      end
      # verify the required parameter 'reserve_id_delete_request' is set
      if @api_client.config.client_side_validation && reserve_id_delete_request.nil?
        fail ArgumentError, "Missing the required parameter 'reserve_id_delete_request' when calling DefaultApi.reserve_id_patch"
      end
      # resource path
      local_var_path = '/reserve/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reserve_id_delete_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ReserveGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.reserve_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reserve_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create reserve
    # @param reserve_get_request [ReserveGetRequest] To mark an account as having reserve protection, create a reserve object.
    # @param [Hash] opts the optional parameters
    # @return [ReserveGet200ResponseInner]
    def reserve_post(reserve_get_request, opts = {})
      data, _status_code, _headers = reserve_post_with_http_info(reserve_get_request, opts)
      data
    end

    # create reserve
    # @param reserve_get_request [ReserveGetRequest] To mark an account as having reserve protection, create a reserve object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReserveGet200ResponseInner, Integer, Hash)>] ReserveGet200ResponseInner data, response status code and response headers
    def reserve_post_with_http_info(reserve_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reserve_post ...'
      end
      # verify the required parameter 'reserve_get_request' is set
      if @api_client.config.client_side_validation && reserve_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'reserve_get_request' when calling DefaultApi.reserve_post"
      end
      # resource path
      local_var_path = '/reserve'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reserve_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ReserveGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.reserve_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reserve_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index search
    # @param [Hash] opts the optional parameters
    # @return [Array<SearchGet200ResponseInner>]
    def search_get(opts = {})
      data, _status_code, _headers = search_get_with_http_info(opts)
      data
    end

    # index search
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SearchGet200ResponseInner>, Integer, Hash)>] Array<SearchGet200ResponseInner> data, response status code and response headers
    def search_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_get ...'
      end
      # resource path
      local_var_path = '/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SearchGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.search_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index setting
    # @param [Hash] opts the optional parameters
    # @return [Array<SettingGet200ResponseInner>]
    def setting_get(opts = {})
      data, _status_code, _headers = setting_get_with_http_info(opts)
      data
    end

    # index setting
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SettingGet200ResponseInner>, Integer, Hash)>] Array<SettingGet200ResponseInner> data, response status code and response headers
    def setting_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.setting_get ...'
      end
      # resource path
      local_var_path = '/setting'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SettingGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.setting_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#setting_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update setting
    # @param setting_get_request [SettingGetRequest] The setting to update
    # @param [Hash] opts the optional parameters
    # @return [SettingGet200ResponseInner]
    def setting_patch(setting_get_request, opts = {})
      data, _status_code, _headers = setting_patch_with_http_info(setting_get_request, opts)
      data
    end

    # update setting
    # @param setting_get_request [SettingGetRequest] The setting to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(SettingGet200ResponseInner, Integer, Hash)>] SettingGet200ResponseInner data, response status code and response headers
    def setting_patch_with_http_info(setting_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.setting_patch ...'
      end
      # verify the required parameter 'setting_get_request' is set
      if @api_client.config.client_side_validation && setting_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'setting_get_request' when calling DefaultApi.setting_patch"
      end
      # resource path
      local_var_path = '/setting'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(setting_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SettingGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.setting_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#setting_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create simulation
    # @param simulation_post_request [SimulationPostRequest] The simulation to create
    # @param [Hash] opts the optional parameters
    # @return [SimulationPost200Response]
    def simulation_post(simulation_post_request, opts = {})
      data, _status_code, _headers = simulation_post_with_http_info(simulation_post_request, opts)
      data
    end

    # create simulation
    # @param simulation_post_request [SimulationPostRequest] The simulation to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimulationPost200Response, Integer, Hash)>] SimulationPost200Response data, response status code and response headers
    def simulation_post_with_http_info(simulation_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.simulation_post ...'
      end
      # verify the required parameter 'simulation_post_request' is set
      if @api_client.config.client_side_validation && simulation_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'simulation_post_request' when calling DefaultApi.simulation_post"
      end
      # resource path
      local_var_path = '/simulation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(simulation_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SimulationPost200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.simulation_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#simulation_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index survey
    # @param [Hash] opts the optional parameters
    # @return [Array<SurveyGet200ResponseInner>]
    def survey_get(opts = {})
      data, _status_code, _headers = survey_get_with_http_info(opts)
      data
    end

    # index survey
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SurveyGet200ResponseInner>, Integer, Hash)>] Array<SurveyGet200ResponseInner> data, response status code and response headers
    def survey_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.survey_get ...'
      end
      # resource path
      local_var_path = '/survey'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SurveyGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.survey_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#survey_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get survey
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [SurveyGet200ResponseInner]
    def survey_id_get(id, opts = {})
      data, _status_code, _headers = survey_id_get_with_http_info(id, opts)
      data
    end

    # get survey
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveyGet200ResponseInner, Integer, Hash)>] SurveyGet200ResponseInner data, response status code and response headers
    def survey_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.survey_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.survey_id_get"
      end
      # resource path
      local_var_path = '/survey/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SurveyGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.survey_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#survey_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index third_party_ach
    # @param [Hash] opts the optional parameters
    # @return [Array<ThirdPartyAchGet200ResponseInner>]
    def third_party_ach_get(opts = {})
      data, _status_code, _headers = third_party_ach_get_with_http_info(opts)
      data
    end

    # index third_party_ach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ThirdPartyAchGet200ResponseInner>, Integer, Hash)>] Array<ThirdPartyAchGet200ResponseInner> data, response status code and response headers
    def third_party_ach_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.third_party_ach_get ...'
      end
      # resource path
      local_var_path = '/third_party_ach'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ThirdPartyAchGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.third_party_ach_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#third_party_ach_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get third_party_ach
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ThirdPartyAchGet200ResponseInner]
    def third_party_ach_id_get(id, opts = {})
      data, _status_code, _headers = third_party_ach_id_get_with_http_info(id, opts)
      data
    end

    # get third_party_ach
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ThirdPartyAchGet200ResponseInner, Integer, Hash)>] ThirdPartyAchGet200ResponseInner data, response status code and response headers
    def third_party_ach_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.third_party_ach_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.third_party_ach_id_get"
      end
      # resource path
      local_var_path = '/third_party_ach/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ThirdPartyAchGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.third_party_ach_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#third_party_ach_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update third_party_ach
    # @param id [String] 
    # @param third_party_ach_id_get_request [ThirdPartyAchIdGetRequest] The third_party_ach to update
    # @param [Hash] opts the optional parameters
    # @return [ThirdPartyAchGet200ResponseInner]
    def third_party_ach_id_patch(id, third_party_ach_id_get_request, opts = {})
      data, _status_code, _headers = third_party_ach_id_patch_with_http_info(id, third_party_ach_id_get_request, opts)
      data
    end

    # update third_party_ach
    # @param id [String] 
    # @param third_party_ach_id_get_request [ThirdPartyAchIdGetRequest] The third_party_ach to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ThirdPartyAchGet200ResponseInner, Integer, Hash)>] ThirdPartyAchGet200ResponseInner data, response status code and response headers
    def third_party_ach_id_patch_with_http_info(id, third_party_ach_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.third_party_ach_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.third_party_ach_id_patch"
      end
      # verify the required parameter 'third_party_ach_id_get_request' is set
      if @api_client.config.client_side_validation && third_party_ach_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'third_party_ach_id_get_request' when calling DefaultApi.third_party_ach_id_patch"
      end
      # resource path
      local_var_path = '/third_party_ach/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(third_party_ach_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ThirdPartyAchGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.third_party_ach_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#third_party_ach_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create third_party_ach
    # @param third_party_ach_get_request [ThirdPartyAchGetRequest] The third_party_ach to create
    # @param [Hash] opts the optional parameters
    # @return [ThirdPartyAchGet200ResponseInner]
    def third_party_ach_post(third_party_ach_get_request, opts = {})
      data, _status_code, _headers = third_party_ach_post_with_http_info(third_party_ach_get_request, opts)
      data
    end

    # create third_party_ach
    # @param third_party_ach_get_request [ThirdPartyAchGetRequest] The third_party_ach to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ThirdPartyAchGet200ResponseInner, Integer, Hash)>] ThirdPartyAchGet200ResponseInner data, response status code and response headers
    def third_party_ach_post_with_http_info(third_party_ach_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.third_party_ach_post ...'
      end
      # verify the required parameter 'third_party_ach_get_request' is set
      if @api_client.config.client_side_validation && third_party_ach_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'third_party_ach_get_request' when calling DefaultApi.third_party_ach_post"
      end
      # resource path
      local_var_path = '/third_party_ach'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(third_party_ach_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ThirdPartyAchGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.third_party_ach_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#third_party_ach_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<TransactionIdGet200Response>]
    def transaction_get(opts = {})
      data, _status_code, _headers = transaction_get_with_http_info(opts)
      data
    end

    # index transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TransactionIdGet200Response>, Integer, Hash)>] Array<TransactionIdGet200Response> data, response status code and response headers
    def transaction_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transaction_get ...'
      end
      # resource path
      local_var_path = '/transaction'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TransactionIdGet200Response>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.transaction_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transaction_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get transaction
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [TransactionIdGet200Response]
    def transaction_id_get(id, opts = {})
      data, _status_code, _headers = transaction_id_get_with_http_info(id, opts)
      data
    end

    # get transaction
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionIdGet200Response, Integer, Hash)>] TransactionIdGet200Response data, response status code and response headers
    def transaction_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transaction_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.transaction_id_get"
      end
      # resource path
      local_var_path = '/transaction/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.transaction_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transaction_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<WebhookGet200ResponseInner>]
    def webhook_get(opts = {})
      data, _status_code, _headers = webhook_get_with_http_info(opts)
      data
    end

    # index webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WebhookGet200ResponseInner>, Integer, Hash)>] Array<WebhookGet200ResponseInner> data, response status code and response headers
    def webhook_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.webhook_get ...'
      end
      # resource path
      local_var_path = '/webhook'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WebhookGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.webhook_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#webhook_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete webhook
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def webhook_id_delete(id, opts = {})
      webhook_id_delete_with_http_info(id, opts)
      nil
    end

    # delete webhook
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def webhook_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.webhook_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.webhook_id_delete"
      end
      # resource path
      local_var_path = '/webhook/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.webhook_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#webhook_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get webhook
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [WebhookGet200ResponseInner]
    def webhook_id_get(id, opts = {})
      data, _status_code, _headers = webhook_id_get_with_http_info(id, opts)
      data
    end

    # get webhook
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookGet200ResponseInner, Integer, Hash)>] WebhookGet200ResponseInner data, response status code and response headers
    def webhook_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.webhook_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.webhook_id_get"
      end
      # resource path
      local_var_path = '/webhook/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.webhook_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#webhook_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update webhook
    # @param id [String] 
    # @param webhook_id_delete_request [WebhookIdDeleteRequest] The webhook to update
    # @param [Hash] opts the optional parameters
    # @return [WebhookGet200ResponseInner]
    def webhook_id_patch(id, webhook_id_delete_request, opts = {})
      data, _status_code, _headers = webhook_id_patch_with_http_info(id, webhook_id_delete_request, opts)
      data
    end

    # update webhook
    # @param id [String] 
    # @param webhook_id_delete_request [WebhookIdDeleteRequest] The webhook to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookGet200ResponseInner, Integer, Hash)>] WebhookGet200ResponseInner data, response status code and response headers
    def webhook_id_patch_with_http_info(id, webhook_id_delete_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.webhook_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.webhook_id_patch"
      end
      # verify the required parameter 'webhook_id_delete_request' is set
      if @api_client.config.client_side_validation && webhook_id_delete_request.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id_delete_request' when calling DefaultApi.webhook_id_patch"
      end
      # resource path
      local_var_path = '/webhook/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(webhook_id_delete_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.webhook_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#webhook_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create webhook
    # @param webhook_get_request [WebhookGetRequest] The webhook to create
    # @param [Hash] opts the optional parameters
    # @return [WebhookGet200ResponseInner]
    def webhook_post(webhook_get_request, opts = {})
      data, _status_code, _headers = webhook_post_with_http_info(webhook_get_request, opts)
      data
    end

    # create webhook
    # @param webhook_get_request [WebhookGetRequest] The webhook to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookGet200ResponseInner, Integer, Hash)>] WebhookGet200ResponseInner data, response status code and response headers
    def webhook_post_with_http_info(webhook_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.webhook_post ...'
      end
      # verify the required parameter 'webhook_get_request' is set
      if @api_client.config.client_side_validation && webhook_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_get_request' when calling DefaultApi.webhook_post"
      end
      # resource path
      local_var_path = '/webhook'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(webhook_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.webhook_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#webhook_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # index wire
    # @param [Hash] opts the optional parameters
    # @return [Array<WireGet200ResponseInner>]
    def wire_get(opts = {})
      data, _status_code, _headers = wire_get_with_http_info(opts)
      data
    end

    # index wire
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WireGet200ResponseInner>, Integer, Hash)>] Array<WireGet200ResponseInner> data, response status code and response headers
    def wire_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.wire_get ...'
      end
      # resource path
      local_var_path = '/wire'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WireGet200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.wire_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wire_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get wire
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [WireGet200ResponseInner]
    def wire_id_get(id, opts = {})
      data, _status_code, _headers = wire_id_get_with_http_info(id, opts)
      data
    end

    # get wire
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WireGet200ResponseInner, Integer, Hash)>] WireGet200ResponseInner data, response status code and response headers
    def wire_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.wire_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.wire_id_get"
      end
      # resource path
      local_var_path = '/wire/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WireGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.wire_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wire_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update wire
    # @param id [String] 
    # @param wire_id_get_request [WireIdGetRequest] The wire to update
    # @param [Hash] opts the optional parameters
    # @return [WireGet200ResponseInner]
    def wire_id_patch(id, wire_id_get_request, opts = {})
      data, _status_code, _headers = wire_id_patch_with_http_info(id, wire_id_get_request, opts)
      data
    end

    # update wire
    # @param id [String] 
    # @param wire_id_get_request [WireIdGetRequest] The wire to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(WireGet200ResponseInner, Integer, Hash)>] WireGet200ResponseInner data, response status code and response headers
    def wire_id_patch_with_http_info(id, wire_id_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.wire_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.wire_id_patch"
      end
      # verify the required parameter 'wire_id_get_request' is set
      if @api_client.config.client_side_validation && wire_id_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'wire_id_get_request' when calling DefaultApi.wire_id_patch"
      end
      # resource path
      local_var_path = '/wire/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(wire_id_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WireGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.wire_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wire_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create wire
    # @param wire_get_request [WireGetRequest] The wire to create
    # @param [Hash] opts the optional parameters
    # @return [WireGet200ResponseInner]
    def wire_post(wire_get_request, opts = {})
      data, _status_code, _headers = wire_post_with_http_info(wire_get_request, opts)
      data
    end

    # create wire
    # @param wire_get_request [WireGetRequest] The wire to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(WireGet200ResponseInner, Integer, Hash)>] WireGet200ResponseInner data, response status code and response headers
    def wire_post_with_http_info(wire_get_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.wire_post ...'
      end
      # verify the required parameter 'wire_get_request' is set
      if @api_client.config.client_side_validation && wire_get_request.nil?
        fail ArgumentError, "Missing the required parameter 'wire_get_request' when calling DefaultApi.wire_post"
      end
      # resource path
      local_var_path = '/wire'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(wire_get_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WireGet200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.wire_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#wire_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
