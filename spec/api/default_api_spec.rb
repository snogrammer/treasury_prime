=begin
#Treasury Prime API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::DefaultApi)
    end
  end

  # unit tests for account_get
  # index account.id
  # @param [Hash] opts the optional parameters
  # @return [Array<AccountGet200ResponseInner>]
  describe 'account_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_id_active_holds_get
  # get account.active_holds
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [AccountIdActiveHoldsGet200Response]
  describe 'account_id_active_holds_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_id_average_balance_get
  # get-index account
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'account_id_average_balance_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_id_daily_balance_get
  # List Daily Balances
  # The end of day balances are available using the daily_balance endpoint. You can query this endpoint by date range; if no date range is specified, the endpoint will return balances for the most recent 30 days including today.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'account_id_daily_balance_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_id_delete
  # delete account
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'account_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_id_get
  # get account
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [AccountIdDelete200Response]
  describe 'account_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_id_patch
  # update account
  # @param id 
  # @param account_id_delete_request The account to update
  # @param [Hash] opts the optional parameters
  # @return [AccountIdDelete200Response]
  describe 'account_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_id_statement_file_id_get
  # get account.statement.file
  # @param id 
  # @param file_id 
  # @param [Hash] opts the optional parameters
  # @return [AccountIdTaxDocumentFileIdGet200Response]
  describe 'account_id_statement_file_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_id_statement_get
  # Retrieve Statements
  # At the end of every month, statements are generated for every account. The monthly statement lists the transactions for the month, the change in balance, and any interest accrued. This endpoint returns a URL to an account statement, or an error if none are available. The URL will serve a PDF of the statement itself.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [AccountIdStatementGet200Response]
  describe 'account_id_statement_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_id_tax_document_file_id_get
  # get account.tax_document.file
  # @param id 
  # @param file_id 
  # @param [Hash] opts the optional parameters
  # @return [AccountIdTaxDocumentFileIdGet200Response]
  describe 'account_id_tax_document_file_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_id_tax_document_get
  # get account.tax_document
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [AccountIdTaxDocumentGet200Response]
  describe 'account_id_tax_document_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_id_transaction_get
  # get-index account.transaction
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'account_id_transaction_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_number_post
  # create account-number
  # @param account_number_post_request The account-number to create
  # @param [Hash] opts the optional parameters
  # @return [AccountNumberPost200Response]
  describe 'account_number_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_number_reservation_get
  # Retrieve an Account Number Reservation
  # @param [Hash] opts the optional parameters
  # @return [Array<AccountNumberReservationGet200ResponseInner>]
  describe 'account_number_reservation_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_number_reservation_id_get
  # get account-number-reservation
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [AccountNumberReservationGet200ResponseInner]
  describe 'account_number_reservation_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_number_reservation_post
  # Create an Account Number Reservation
  # By default, accounts created through the Treasury Prime API are assigned system-generated account numbers at the time of account creation. However, certain integrations require knowing the account number that will be assigned prior to account creation. For those scenarios the account_number_reservation endpoint can be used to pre-allocate an account number when submitting an account application.
  # @param body The account-number-reservation to create
  # @param [Hash] opts the optional parameters
  # @return [AccountNumberReservationGet200ResponseInner]
  describe 'account_number_reservation_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_post
  # create account.create
  # @param account_get_request The account.create to create
  # @param [Hash] opts the optional parameters
  # @return [AccountGet200Response]
  describe 'account_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_product_get
  # index account_product
  # @param [Hash] opts the optional parameters
  # @return [Array<AccountProductGet200ResponseInner>]
  describe 'account_product_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for account_product_id_get
  # get account_product
  # @param [Hash] opts the optional parameters
  # @return [AccountProductGet200ResponseInner]
  describe 'account_product_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ach_get
  # List All ACH Transfers
  # Returns a list of all existing ACH transfers that you have created, or an empty list if none are available.
  # @param [Hash] opts the optional parameters
  # @return [Array<AchGet200ResponseInner>]
  describe 'ach_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ach_id_get
  # get ach
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [AchGet200ResponseInner]
  describe 'ach_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ach_id_patch
  # update ach
  # @param id 
  # @param ach_id_get_request The ach to update
  # @param [Hash] opts the optional parameters
  # @return [AchGet200ResponseInner]
  describe 'ach_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ach_post
  # Create an ACH
  # To initiate a new ACH transfer, you create a new ACH object.
  # @param ach_get_request The ach to create
  # @param [Hash] opts the optional parameters
  # @return [AchGet200ResponseInner]
  describe 'ach_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_account_application_get
  # Retrieve All Account Applications
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id Application ID
  # @return [nil]
  describe 'apply_account_application_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_account_application_id_get
  # get apply.account-application
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ApplyAccountApplicationIdGet200Response]
  describe 'apply_account_application_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_account_application_id_patch
  # update apply.account-application
  # @param id 
  # @param apply_account_application_id_get_request The apply.account-application to update
  # @param [Hash] opts the optional parameters
  # @return [ApplyAccountApplicationIdGet200Response]
  describe 'apply_account_application_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_account_application_post
  # Create Account Application
  # To create an application for a new bank account, create an Account Application object.  This example demonstrates the creation of a Personal account. Business accounts are very similar, but will utilize a few different fields. Please see [https://developers.treasuryprime.com/guides/open-accounts](https://developers.treasuryprime.com/guides/open-accounts) for more information.
  # @param [Hash] opts the optional parameters
  # @option opts [ApplyAccountApplicationGetRequest] :apply_account_application_get_request 
  # @return [String]
  describe 'apply_account_application_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_additional_person_application_get
  # index apply.additional-person-application
  # @param [Hash] opts the optional parameters
  # @return [Array<ApplyAdditionalPersonApplicationIdGet200Response>]
  describe 'apply_additional_person_application_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_additional_person_application_id_get
  # Retrieve an Additional Person Application
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ApplyAdditionalPersonApplicationIdGet200Response]
  describe 'apply_additional_person_application_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_additional_person_application_id_patch
  # Update an Additional Person Applications
  # Updates the specified Additional Person Application by setting the values of the passed parameters. Any parameters not provided will be left unchanged. Note: only the userdata parameter is permitted to change.
  # @param id 
  # @param apply_additional_person_application_id_get_request The apply.additional-person-application to update
  # @param [Hash] opts the optional parameters
  # @return [ApplyAdditionalPersonApplicationIdGet200Response]
  describe 'apply_additional_person_application_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_additional_person_application_post
  # create apply.additional-person-application
  # @param apply_additional_person_application_get_request The apply.additional-person-application to create
  # @param [Hash] opts the optional parameters
  # @return [ApplyAdditionalPersonApplicationIdGet200Response]
  describe 'apply_additional_person_application_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_authorized_user_application_get
  # index apply.authorized-user-application
  # @param [Hash] opts the optional parameters
  # @return [Array<ApplyAuthorizedUserApplicationGet200ResponseInner>]
  describe 'apply_authorized_user_application_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_authorized_user_application_id_get
  # get apply.authorized-user-application
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ApplyAuthorizedUserApplicationGet200ResponseInner]
  describe 'apply_authorized_user_application_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_authorized_user_application_id_patch
  # update apply.authorized-user-application
  # @param id 
  # @param apply_authorized_user_application_id_get_request The apply.authorized-user-application to update
  # @param [Hash] opts the optional parameters
  # @return [ApplyAuthorizedUserApplicationGet200ResponseInner]
  describe 'apply_authorized_user_application_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_authorized_user_application_post
  # create apply.authorized-user-application
  # @param apply_authorized_user_application_get_request The apply.authorized-user-application to create
  # @param [Hash] opts the optional parameters
  # @return [ApplyAuthorizedUserApplicationGet200ResponseInner]
  describe 'apply_authorized_user_application_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_business_application_get
  # index apply.business-application
  # @param [Hash] opts the optional parameters
  # @return [Array<ApplyBusinessApplicationIdGet200Response>]
  describe 'apply_business_application_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_business_application_id_get
  # get apply.business-application
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ApplyBusinessApplicationIdGet200Response]
  describe 'apply_business_application_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_business_application_id_patch
  # update apply.business-application
  # @param id 
  # @param apply_business_application_id_get_request The apply.business-application to update
  # @param [Hash] opts the optional parameters
  # @return [ApplyBusinessApplicationIdGet200Response]
  describe 'apply_business_application_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_business_application_post
  # create apply.business-application
  # @param apply_business_application_get_request The apply.business-application to create
  # @param [Hash] opts the optional parameters
  # @return [ApplyBusinessApplicationIdGet200Response]
  describe 'apply_business_application_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_compliance_get
  # index apply.compliance
  # @param [Hash] opts the optional parameters
  # @return [Array<ApplyComplianceGet200ResponseInner>]
  describe 'apply_compliance_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_compliance_id_get
  # get apply.compliance
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ApplyComplianceGet200ResponseInner]
  describe 'apply_compliance_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_compliance_post
  # create apply.compliance
  # @param apply_compliance_get_request The apply.compliance to create
  # @param [Hash] opts the optional parameters
  # @return [ApplyComplianceGet200ResponseInner]
  describe 'apply_compliance_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_deposit_get
  # index apply.deposit
  # @param [Hash] opts the optional parameters
  # @return [Array<ApplyDepositIdGet200Response>]
  describe 'apply_deposit_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_deposit_id_get
  # get apply.deposit
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ApplyDepositIdGet200Response]
  describe 'apply_deposit_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_deposit_post
  # create apply.deposit
  # @param apply_deposit_get_request The apply.deposit to create
  # @param [Hash] opts the optional parameters
  # @return [ApplyDepositIdGet200Response]
  describe 'apply_deposit_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_kyc_get
  # index apply.kyc
  # @param [Hash] opts the optional parameters
  # @return [Array<ApplyKycIdGet200Response>]
  describe 'apply_kyc_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_kyc_id_get
  # get apply.kyc
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ApplyKycIdGet200Response]
  describe 'apply_kyc_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_kyc_post
  # create apply.kyc
  # @param apply_kyc_get_request The apply.kyc to create
  # @param [Hash] opts the optional parameters
  # @return [ApplyKycIdGet200Response]
  describe 'apply_kyc_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_kyc_product_get
  # index apply.kyc-product
  # @param [Hash] opts the optional parameters
  # @return [Array<ApplyKycProductGet200ResponseInner>]
  describe 'apply_kyc_product_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_kyc_product_id_get
  # get apply.kyc-product
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ApplyKycProductGet200ResponseInner]
  describe 'apply_kyc_product_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_kyc_product_id_patch
  # update apply.kyc-product
  # @param id 
  # @param apply_kyc_product_id_get_request The apply.kyc-product to update
  # @param [Hash] opts the optional parameters
  # @return [ApplyKycProductGet200ResponseInner]
  describe 'apply_kyc_product_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_kyc_product_post
  # create apply.kyc-product
  # @param apply_kyc_product_get_request The apply.kyc-product to create
  # @param [Hash] opts the optional parameters
  # @return [ApplyKycProductGet200ResponseInner]
  describe 'apply_kyc_product_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_parent_business_get
  # index apply.parent-business
  # @param [Hash] opts the optional parameters
  # @return [Array<ApplyParentBusinessIdGet200Response>]
  describe 'apply_parent_business_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_parent_business_id_get
  # get apply.parent-business
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ApplyParentBusinessIdGet200Response]
  describe 'apply_parent_business_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_parent_business_id_patch
  # update apply.parent-business
  # @param id 
  # @param apply_parent_business_id_get_request The apply.parent-business to update
  # @param [Hash] opts the optional parameters
  # @return [ApplyParentBusinessIdGet200Response]
  describe 'apply_parent_business_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_parent_business_post
  # create apply.parent-business
  # @param apply_parent_business_get_request The apply.parent-business to create
  # @param [Hash] opts the optional parameters
  # @return [ApplyParentBusinessIdGet200Response]
  describe 'apply_parent_business_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_person_application_get
  # index apply.person-application
  # @param [Hash] opts the optional parameters
  # @return [Array<ApplyPersonApplicationGet200ResponseInner>]
  describe 'apply_person_application_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_person_application_id_get
  # get apply.person-application
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ApplyPersonApplicationGet200ResponseInner]
  describe 'apply_person_application_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_person_application_id_patch
  # update apply.person-application
  # @param id 
  # @param apply_person_application_id_get_request The apply.person-application to update
  # @param [Hash] opts the optional parameters
  # @return [ApplyPersonApplicationGet200ResponseInner]
  describe 'apply_person_application_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apply_person_application_post
  # create apply.person-application
  # @param apply_person_application_get_request The apply.person-application to create
  # @param [Hash] opts the optional parameters
  # @return [ApplyPersonApplicationGet200ResponseInner]
  describe 'apply_person_application_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_counterparty_get
  # index billpay_counterparty
  # @param [Hash] opts the optional parameters
  # @return [Array<BillpayCounterpartyIdGet200Response>]
  describe 'billpay_counterparty_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_counterparty_id_get
  # Retrieve a Bill Pay Counterparty
  # A Bill Pay Counterparty represents the person or organization receiving the bill payment. Bill Pay Counterparties are similar to ordinary Counterparties but they have some key differences. The biggest difference is that the Bill Pay Counterparty is explicitly linked to a particular Account. Always be sure to use a Bill Pay Counterparty when accessing the Bill Pay APIs. Counterparties may be added manually or pre-populated with a Merchant&#39;s payment information. Payments to manually-added counterparties will be sent via direct check, whereas pre-populated merchants will be paid electronically.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [BillpayCounterpartyIdGet200Response]
  describe 'billpay_counterparty_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_counterparty_id_patch
  # update billpay_counterparty
  # @param id 
  # @param billpay_counterparty_id_get_request The billpay_counterparty to update
  # @param [Hash] opts the optional parameters
  # @return [BillpayCounterpartyIdGet200Response]
  describe 'billpay_counterparty_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_counterparty_post
  # create billpay_counterparty
  # @param billpay_counterparty_get_request The billpay_counterparty to create
  # @param [Hash] opts the optional parameters
  # @return [BillpayCounterpartyIdGet200Response]
  describe 'billpay_counterparty_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_merchant_get
  # get billpay_merchant
  # @param [Hash] opts the optional parameters
  # @return [BillpayMerchantGet200Response]
  describe 'billpay_merchant_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_payment_get
  # index billpay_payment
  # @param [Hash] opts the optional parameters
  # @return [Array<BillpayPaymentIdGet200Response>]
  describe 'billpay_payment_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_payment_id_get
  # get billpay_payment
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [BillpayPaymentIdGet200Response]
  describe 'billpay_payment_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_payment_id_patch
  # update billpay_payment
  # @param id 
  # @param billpay_payment_id_get_request The billpay_payment to update
  # @param [Hash] opts the optional parameters
  # @return [BillpayPaymentIdGet200Response]
  describe 'billpay_payment_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_payment_post
  # create billpay_payment
  # @param billpay_payment_get_request The billpay_payment to create
  # @param [Hash] opts the optional parameters
  # @return [BillpayPaymentIdGet200Response]
  describe 'billpay_payment_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_rule_get
  # index billpay_rule
  # @param [Hash] opts the optional parameters
  # @return [Array<BillpayRuleIdGet200Response>]
  describe 'billpay_rule_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_rule_id_get
  # Retrieve a Rule
  # A Rule represents a template for a recurring bill payment. Each Rule contains all the parameters necessary for creating a Payment plus some additional parameters to control the recurring schedule. The bill pay service periodically runs each rule and determines if a new payment needs to be made; if so, the payment is created and will subsequently appear in calls to /billpay/payment.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [BillpayRuleIdGet200Response]
  describe 'billpay_rule_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_rule_id_patch
  # Update a Rule
  # Updates the specified Bill Payment Rule by setting the values of the passed parameters. Any parameters not provided will be left unchanged.
  # @param id 
  # @param billpay_rule_id_get_request The billpay_rule to update
  # @param [Hash] opts the optional parameters
  # @return [BillpayRuleIdGet200Response]
  describe 'billpay_rule_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for billpay_rule_post
  # create billpay_rule
  # @param billpay_rule_get_request The billpay_rule to create
  # @param [Hash] opts the optional parameters
  # @return [BillpayRuleIdGet200Response]
  describe 'billpay_rule_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for book_get
  # index book
  # @param [Hash] opts the optional parameters
  # @return [Array<BookGet200ResponseInner>]
  describe 'book_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for book_id_get
  # get book
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [BookGet200ResponseInner]
  describe 'book_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for book_id_patch
  # update book
  # @param id 
  # @param book_id_get_request The book to update
  # @param [Hash] opts the optional parameters
  # @return [BookGet200ResponseInner]
  describe 'book_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for book_post
  # create book
  # @param book_get_request The book to create
  # @param [Hash] opts the optional parameters
  # @return [BookGet200ResponseInner]
  describe 'book_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for business_id_get
  # get business
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [BusinessIdGet200Response]
  describe 'business_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for business_id_patch
  # update business
  # @param id 
  # @param business_id_get_request The business to update
  # @param [Hash] opts the optional parameters
  # @return [BusinessIdGet200Response]
  describe 'business_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_auth_loop_endpoint_get
  # List Card Auth Loop Endpoints
  # Returns a list of Card Auth Loop Endpoint objects, or an empty list if none are available.
  # @param [Hash] opts the optional parameters
  # @return [Array<CardAuthLoopEndpointGet200ResponseInner>]
  describe 'card_auth_loop_endpoint_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_auth_loop_endpoint_id_delete
  # delete card_auth_loop_endpoint
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'card_auth_loop_endpoint_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_auth_loop_endpoint_id_get
  # get card_auth_loop_endpoint
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [CardAuthLoopEndpointGet200ResponseInner]
  describe 'card_auth_loop_endpoint_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_auth_loop_endpoint_id_patch
  # update card_auth_loop_endpoint
  # @param id 
  # @param card_auth_loop_endpoint_id_delete_request The card_auth_loop_endpoint to update
  # @param [Hash] opts the optional parameters
  # @return [CardAuthLoopEndpointGet200ResponseInner]
  describe 'card_auth_loop_endpoint_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_auth_loop_endpoint_post
  # create card_auth_loop_endpoint
  # @param card_auth_loop_endpoint_get_request The card_auth_loop_endpoint to create
  # @param [Hash] opts the optional parameters
  # @return [CardAuthLoopEndpointGet200ResponseInner]
  describe 'card_auth_loop_endpoint_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_card_id_digital_wallet_token_google_pay_post
  # create google-pay-token-request
  # @param card_id 
  # @param card_card_id_digital_wallet_token_google_pay_post_request The google-pay-token-request to create
  # @param [Hash] opts the optional parameters
  # @return [CardCardIdDigitalWalletTokenGooglePayPost200Response]
  describe 'card_card_id_digital_wallet_token_google_pay_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_charge_get
  # index card.charge
  # @param [Hash] opts the optional parameters
  # @return [Array<CardChargeIdGet200Response>]
  describe 'card_charge_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_charge_id_get
  # get card.charge
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [CardChargeIdGet200Response]
  describe 'card_charge_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_charge_post
  # create card.charge
  # @param card_charge_get_request The card.charge to create
  # @param [Hash] opts the optional parameters
  # @return [CardChargeIdGet200Response]
  describe 'card_charge_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_event_get
  # List Card Events
  # Returns a list of card event objects, filterable by card_id, or an empty list if none are available.
  # @param [Hash] opts the optional parameters
  # @return [Array<CardEventIdGet200Response>]
  describe 'card_event_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_event_id_get
  # Retrieve a Card Event
  # Retrieves the details of an existing card event. Pass a unique ID from the Card Event list.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [CardEventIdGet200Response]
  describe 'card_event_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_get
  # index card
  # @param [Hash] opts the optional parameters
  # @return [Array<CardGet200ResponseInner>]
  describe 'card_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_id_get
  # get card
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [CardGet200ResponseInner]
  describe 'card_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_id_patch
  # update card
  # @param id 
  # @param card_id_get_request The card to update
  # @param [Hash] opts the optional parameters
  # @return [CardGet200ResponseInner]
  describe 'card_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_id_token_get
  # get token
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [CardIdTokenGet200Response]
  describe 'card_id_token_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for card_post
  # create card
  # @param card_get_request The card to create
  # @param [Hash] opts the optional parameters
  # @return [CardGet200ResponseInner]
  describe 'card_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cardproduct_get
  # index cardproduct
  # @param [Hash] opts the optional parameters
  # @return [Array<CardproductIdGet200Response>]
  describe 'cardproduct_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cardproduct_id_get
  # Card Product
  # The Card Product resource represents the program settings, customizations, and behavior of the cards you&#39;re issuing. In general, these resources will be configured by Treasury Prime when you set up your card program. This resource is exposed in the API for your reference.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [CardproductIdGet200Response]
  describe 'cardproduct_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cardproduct_id_patch
  # update cardproduct
  # @param id 
  # @param cardproduct_id_get_request The cardproduct to update
  # @param [Hash] opts the optional parameters
  # @return [CardproductIdGet200Response]
  describe 'cardproduct_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_deposit_get
  # index check_deposit
  # @param [Hash] opts the optional parameters
  # @return [Array<CheckDepositGet200ResponseInner>]
  describe 'check_deposit_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_deposit_id_get
  # get check_deposit
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [CheckDepositGet200ResponseInner]
  describe 'check_deposit_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_deposit_person_get
  # index check_deposit_person
  # @param [Hash] opts the optional parameters
  # @return [Array<CheckDepositPersonIdGet200Response>]
  describe 'check_deposit_person_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_deposit_person_id_get
  # get check_deposit_person
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [CheckDepositPersonIdGet200Response]
  describe 'check_deposit_person_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_deposit_person_post
  # create check_deposit_person
  # @param check_deposit_person_get_request The check_deposit_person to create
  # @param [Hash] opts the optional parameters
  # @return [CheckDepositPersonIdGet200Response]
  describe 'check_deposit_person_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_deposit_post
  # create check_deposit
  # @param check_deposit_get_request The check_deposit to create
  # @param [Hash] opts the optional parameters
  # @return [CheckDepositGet200ResponseInner]
  describe 'check_deposit_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_get
  # index check
  # @param [Hash] opts the optional parameters
  # @return [Array<CheckGet200ResponseInner>]
  describe 'check_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_id_get
  # get check
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [CheckGet200ResponseInner]
  describe 'check_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_image_get
  # index check_image
  # @param [Hash] opts the optional parameters
  # @return [Array<CheckImageGet200ResponseInner>]
  describe 'check_image_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_image_id_get
  # get check_image
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [CheckImageGet200ResponseInner]
  describe 'check_image_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_post
  # create check
  # @param check_get_request The check to create
  # @param [Hash] opts the optional parameters
  # @return [CheckGet200ResponseInner]
  describe 'check_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for counterparty_get
  # index counterparty
  # @param [Hash] opts the optional parameters
  # @return [Array<CounterpartyIdGet200Response>]
  describe 'counterparty_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for counterparty_id_get
  # get counterparty
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [CounterpartyIdGet200Response]
  describe 'counterparty_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for counterparty_id_patch
  # update counterparty
  # @param id 
  # @param counterparty_id_get_request The counterparty to update
  # @param [Hash] opts the optional parameters
  # @return [CounterpartyIdGet200Response]
  describe 'counterparty_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for counterparty_post
  # create counterparty
  # @param counterparty_get_request The counterparty to create
  # @param [Hash] opts the optional parameters
  # @return [CounterpartyIdGet200Response]
  describe 'counterparty_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for document_get
  # index document
  # @param [Hash] opts the optional parameters
  # @return [Array<DocumentGet200ResponseInner>]
  describe 'document_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for document_id_get
  # get document
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [DocumentGet200ResponseInner]
  describe 'document_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for document_id_patch
  # update document
  # @param id 
  # @param document_id_get_request The document to update
  # @param [Hash] opts the optional parameters
  # @return [DocumentGet200ResponseInner]
  describe 'document_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for document_post
  # create document
  # @param document_get_request The document to create
  # @param [Hash] opts the optional parameters
  # @return [DocumentGet200ResponseInner]
  describe 'document_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for file_id_content_get
  # get file
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [FileIdContentGet200Response]
  describe 'file_id_content_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for file_id_get
  # get file
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [FileIdContentGet200Response]
  describe 'file_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for person_id_card_card_id_get
  # get person.card.index
  # @param id 
  # @param card_id 
  # @param [Hash] opts the optional parameters
  # @return [PersonIdCardGet200Response]
  describe 'person_id_card_card_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for person_id_card_get
  # get person.card.index
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [PersonIdCardGet200Response]
  describe 'person_id_card_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for person_id_card_post
  # update person.card.in
  # @param id 
  # @param person_id_card_get_request The person.card.in to update
  # @param [Hash] opts the optional parameters
  # @return [PersonIdCardGet200Response1]
  describe 'person_id_card_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for person_id_get
  # get person
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [PersonIdGet200Response]
  describe 'person_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for person_id_patch
  # update person
  # @param id 
  # @param person_id_get_request The person to update
  # @param [Hash] opts the optional parameters
  # @return [PersonIdGet200Response]
  describe 'person_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for plaid_exchange_users_auth_token_post
  # get plaid-exchange.auth
  # @param [Hash] opts the optional parameters
  # @return [PlaidExchangeUsersAuthTokenPost200Response]
  describe 'plaid_exchange_users_auth_token_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for plaid_exchange_users_user_id2fa_post
  # get plaid-exchange.2fa
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [PlaidExchangeUsersUserId2faPost200Response]
  describe 'plaid_exchange_users_user_id2fa_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for plaid_exchange_users_user_id_get
  # get plaid-exchange.identity
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [PlaidExchangeUsersUserIdGet200Response]
  describe 'plaid_exchange_users_user_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for plaid_exchange_users_user_id_transactions_get
  # get plaid-exchange.transactions
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [PlaidExchangeUsersUserIdTransactionsGet200Response]
  describe 'plaid_exchange_users_user_id_transactions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reserve_get
  # index reserve
  # @param [Hash] opts the optional parameters
  # @return [Array<ReserveGet200ResponseInner>]
  describe 'reserve_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reserve_id_delete
  # delete reserve
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'reserve_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reserve_id_get
  # get reserve
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ReserveGet200ResponseInner]
  describe 'reserve_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reserve_id_patch
  # update reserve
  # @param id 
  # @param reserve_id_delete_request The reserve to update
  # @param [Hash] opts the optional parameters
  # @return [ReserveGet200ResponseInner]
  describe 'reserve_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reserve_post
  # create reserve
  # @param reserve_get_request To mark an account as having reserve protection, create a reserve object.
  # @param [Hash] opts the optional parameters
  # @return [ReserveGet200ResponseInner]
  describe 'reserve_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_get
  # index search
  # @param [Hash] opts the optional parameters
  # @return [Array<SearchGet200ResponseInner>]
  describe 'search_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for setting_get
  # index setting
  # @param [Hash] opts the optional parameters
  # @return [Array<SettingGet200ResponseInner>]
  describe 'setting_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for setting_patch
  # update setting
  # @param setting_get_request The setting to update
  # @param [Hash] opts the optional parameters
  # @return [SettingGet200ResponseInner]
  describe 'setting_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for simulation_post
  # create simulation
  # @param simulation_post_request The simulation to create
  # @param [Hash] opts the optional parameters
  # @return [SimulationPost200Response]
  describe 'simulation_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for survey_get
  # index survey
  # @param [Hash] opts the optional parameters
  # @return [Array<SurveyGet200ResponseInner>]
  describe 'survey_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for survey_id_get
  # get survey
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [SurveyGet200ResponseInner]
  describe 'survey_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for third_party_ach_get
  # index third_party_ach
  # @param [Hash] opts the optional parameters
  # @return [Array<ThirdPartyAchGet200ResponseInner>]
  describe 'third_party_ach_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for third_party_ach_id_get
  # get third_party_ach
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ThirdPartyAchGet200ResponseInner]
  describe 'third_party_ach_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for third_party_ach_id_patch
  # update third_party_ach
  # @param id 
  # @param third_party_ach_id_get_request The third_party_ach to update
  # @param [Hash] opts the optional parameters
  # @return [ThirdPartyAchGet200ResponseInner]
  describe 'third_party_ach_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for third_party_ach_post
  # create third_party_ach
  # @param third_party_ach_get_request The third_party_ach to create
  # @param [Hash] opts the optional parameters
  # @return [ThirdPartyAchGet200ResponseInner]
  describe 'third_party_ach_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transaction_get
  # index transaction
  # @param [Hash] opts the optional parameters
  # @return [Array<TransactionIdGet200Response>]
  describe 'transaction_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transaction_id_get
  # get transaction
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [TransactionIdGet200Response]
  describe 'transaction_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for webhook_get
  # index webhook
  # @param [Hash] opts the optional parameters
  # @return [Array<WebhookGet200ResponseInner>]
  describe 'webhook_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for webhook_id_delete
  # delete webhook
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'webhook_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for webhook_id_get
  # get webhook
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [WebhookGet200ResponseInner]
  describe 'webhook_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for webhook_id_patch
  # update webhook
  # @param id 
  # @param webhook_id_delete_request The webhook to update
  # @param [Hash] opts the optional parameters
  # @return [WebhookGet200ResponseInner]
  describe 'webhook_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for webhook_post
  # create webhook
  # @param webhook_get_request The webhook to create
  # @param [Hash] opts the optional parameters
  # @return [WebhookGet200ResponseInner]
  describe 'webhook_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for wire_get
  # index wire
  # @param [Hash] opts the optional parameters
  # @return [Array<WireGet200ResponseInner>]
  describe 'wire_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for wire_id_get
  # get wire
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [WireGet200ResponseInner]
  describe 'wire_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for wire_id_patch
  # update wire
  # @param id 
  # @param wire_id_get_request The wire to update
  # @param [Hash] opts the optional parameters
  # @return [WireGet200ResponseInner]
  describe 'wire_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for wire_post
  # create wire
  # @param wire_get_request The wire to create
  # @param [Hash] opts the optional parameters
  # @return [WireGet200ResponseInner]
  describe 'wire_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
